// Code generated by xgen. DO NOT EDIT.

package sep

import (
	"encoding/xml"
)

// DeviceCapability is Returned by the URI provided by DNS-SD, to allow clients to find the URIs to the resources in which they are interested.
type DeviceCapability struct {
	PollRateAttr             uint32                    `xml:"pollRate,attr,omitempty"`
	EndDeviceListLink        *EndDeviceListLink        `xml:"EndDeviceListLink"`
	MirrorUsagePointListLink *MirrorUsagePointListLink `xml:"MirrorUsagePointListLink"`
	SelfDeviceLink           *SelfDeviceLink           `xml:"SelfDeviceLink"`
	*FunctionSetAssignmentsBase
}

// AbstractDevice is Short form of device identifier, WITH the checksum digit. See the Security section for additional details.
type AbstractDevice struct {
	ConfigurationLink            *ConfigurationLink            `xml:"ConfigurationLink"`
	DERListLink                  *DERListLink                  `xml:"DERListLink"`
	DeviceCategory               *DeviceCategoryType           `xml:"deviceCategory"`
	DeviceInformationLink        *DeviceInformationLink        `xml:"DeviceInformationLink"`
	DeviceStatusLink             *DeviceStatusLink             `xml:"DeviceStatusLink"`
	FileStatusLink               *FileStatusLink               `xml:"FileStatusLink"`
	IPInterfaceListLink          *IPInterfaceListLink          `xml:"IPInterfaceListLink"`
	LFDI                         string                        `xml:"lFDI"`
	LoadShedAvailabilityListLink *LoadShedAvailabilityListLink `xml:"LoadShedAvailabilityListLink"`
	LogEventListLink             *LogEventListLink             `xml:"LogEventListLink"`
	PowerStatusLink              *PowerStatusLink              `xml:"PowerStatusLink"`
	SFDI                         *SFDIType                     `xml:"sFDI"`
	*SubscribableResource
}

// DeviceStatus is Total time device has operated: re-settable: Accumulated time in seconds since the last time the counter was reset.
type DeviceStatus struct {
	PollRateAttr uint32         `xml:"pollRate,attr,omitempty"`
	ChangedTime  *TimeType      `xml:"changedTime"`
	OnCount      uint16         `xml:"onCount"`
	OpState      uint8          `xml:"opState"`
	OpTime       uint32         `xml:"opTime"`
	Temperature  []*Temperature `xml:"Temperature"`
	TimeLink     *TimeLink      `xml:"TimeLink"`
	*Resource
}

// EndDevice is POST rate, or how often EndDevice and subordinate resources should be POSTed, in seconds. A client MAY indicate a preferred postRate when POSTing EndDevice. A server MAY add or modify postRate to indicate its preferred posting rate.
type EndDevice struct {
	ChangedTime                     *TimeType                        `xml:"changedTime"`
	Enabled                         bool                             `xml:"enabled"`
	FlowReservationRequestListLink  *FlowReservationRequestListLink  `xml:"FlowReservationRequestListLink"`
	FlowReservationResponseListLink *FlowReservationResponseListLink `xml:"FlowReservationResponseListLink"`
	FunctionSetAssignmentsListLink  *FunctionSetAssignmentsListLink  `xml:"FunctionSetAssignmentsListLink"`
	PostRate                        uint32                           `xml:"postRate"`
	RegistrationLink                *RegistrationLink                `xml:"RegistrationLink"`
	SubscriptionListLink            *SubscriptionListLink            `xml:"SubscriptionListLink"`
	*AbstractDevice
}

// EndDeviceList is A List element to hold EndDevice objects.
type EndDeviceList struct {
	PollRateAttr uint32       `xml:"pollRate,attr,omitempty"`
	EndDevice    []*EndDevice `xml:"EndDevice"`
	*SubscribableList
}

// Registration is Contains the registration PIN number associated with the device, including the checksum digit.
type Registration struct {
	PollRateAttr       uint32    `xml:"pollRate,attr,omitempty"`
	DateTimeRegistered *TimeType `xml:"dateTimeRegistered"`
	PIN                *PINType  `xml:"pIN"`
	*Resource
}

// SelfDevice is The EndDevice providing the resources available within the DeviceCapabilities.
type SelfDevice struct {
	PollRateAttr uint32 `xml:"pollRate,attr,omitempty"`
	*AbstractDevice
}

// Temperature is Value in Degrees Celsius (uom 23).
type Temperature struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Subject    uint8                     `xml:"subject"`
	Value      int16                     `xml:"value"`
}

// FunctionSetAssignmentsBase is Defines a collection of function set instances that are to be used by one or more devices as indicated by the EndDevice object(s) of the server.
type FunctionSetAssignmentsBase struct {
	CustomerAccountListLink       *CustomerAccountListLink       `xml:"CustomerAccountListLink"`
	DemandResponseProgramListLink *DemandResponseProgramListLink `xml:"DemandResponseProgramListLink"`
	DERProgramListLink            *DERProgramListLink            `xml:"DERProgramListLink"`
	FileListLink                  *FileListLink                  `xml:"FileListLink"`
	MessagingProgramListLink      *MessagingProgramListLink      `xml:"MessagingProgramListLink"`
	PrepaymentListLink            *PrepaymentListLink            `xml:"PrepaymentListLink"`
	ResponseSetListLink           *ResponseSetListLink           `xml:"ResponseSetListLink"`
	TariffProfileListLink         *TariffProfileListLink         `xml:"TariffProfileListLink"`
	TimeLink                      *TimeLink                      `xml:"TimeLink"`
	UsagePointListLink            *UsagePointListLink            `xml:"UsagePointListLink"`
	*Resource
}

// FunctionSetAssignments is Contains the version number of the object. See the type definition for details.
type FunctionSetAssignments struct {
	SubscribableAttr *UInt8       `xml:"subscribable,attr,omitempty"`
	MRID             *MRIDType    `xml:"mRID"`
	Description      string       `xml:"description"`
	Version          *VersionType `xml:"version"`
	*FunctionSetAssignmentsBase
}

// FunctionSetAssignmentsList is A List element to hold FunctionSetAssignments objects.
type FunctionSetAssignmentsList struct {
	PollRateAttr           uint32                    `xml:"pollRate,attr,omitempty"`
	FunctionSetAssignments []*FunctionSetAssignments `xml:"FunctionSetAssignments"`
	*SubscribableList
}

// Condition is The value of the upper threshold
type Condition struct {
	AttributeIdentifier uint8 `xml:"attributeIdentifier"`
	LowerThreshold      int64 `xml:"lowerThreshold"`
	UpperThreshold      int64 `xml:"upperThreshold"`
}

// SubscriptionBase is The resource for which the subscription applies. Query string parameters SHALL NOT be specified when subscribing to list resources.  Should a query string parameter be specified, servers SHALL ignore them.
type SubscriptionBase struct {
	SubscribedResource string `xml:"subscribedResource"`
	*Resource
}

// Subscription is The resource to which to post the notifications about the requested subscribed resource. Because this URI will exist on a server other than the one being POSTed to, this attribute SHALL be a fully-qualified absolute URI, not a relative reference.
type Subscription struct {
	Condition       *Condition `xml:"Condition"`
	Encoding        uint8      `xml:"encoding"`
	Level           string     `xml:"level"`
	Limit           uint32     `xml:"limit"`
	NotificationURI string     `xml:"notificationURI"`
	*SubscriptionBase
}

// SubscriptionList is A List element to hold Subscription objects.
type SubscriptionList struct {
	PollRateAttr uint32          `xml:"pollRate,attr,omitempty"`
	Subscription []*Subscription `xml:"Subscription"`
	*List
}

// Notification is The subscription from which this notification was triggered. This attribute SHALL be a fully-qualified absolute URI, not a relative reference.
type Notification struct {
	NewResourceURI  string    `xml:"newResourceURI"`
	Resource        *Resource `xml:"Resource"`
	Status          uint8     `xml:"status"`
	SubscriptionURI string    `xml:"subscriptionURI"`
	*SubscriptionBase
}

// NotificationList is A List element to hold Notification objects.
type NotificationList struct {
	Notification []*Notification `xml:"Notification"`
	*List
}

// DERControlResponse is A response to a DERControl
type DERControlResponse struct {
	*Response
}

// FlowReservationResponseResponse is A response to a FlowReservationResponse
type FlowReservationResponseResponse struct {
	*Response
}

// AppliedTargetReduction is Indicates the requested amount of the relevant commodity to be reduced.
type AppliedTargetReduction struct {
	Type  *UnitType `xml:"type"`
	Value uint16    `xml:"value"`
}

// DrResponse is Indicates the amount of time, in seconds, that the client partially opts-out during the demand response event. When overriding within the allowed override duration, the client SHALL send a partial opt-out (Response status code 8) for partial opt-out upon completion, with the total time the event was overridden (this attribute) populated. The client SHALL send a no participation status response (status type 10) if the user partially opts-out for longer than EndDeviceControl.overrideDuration.
type DrResponse struct {
	ApplianceLoadReduction *ApplianceLoadReduction `xml:"ApplianceLoadReduction"`
	AppliedTargetReduction *AppliedTargetReduction `xml:"AppliedTargetReduction"`
	DutyCycle              *DutyCycle              `xml:"DutyCycle"`
	Offset                 *Offset                 `xml:"Offset"`
	OverrideDuration       uint16                  `xml:"overrideDuration"`
	SetPoint               *SetPoint               `xml:"SetPoint"`
	*Response
}

// PriceResponse is A response related to a price message.
type PriceResponse struct {
	*Response
}

// Response is The subject field provides a method to match the response with the originating event. It is populated with the mRID of the original object.
type Response struct {
	CreatedDateTime *TimeType `xml:"createdDateTime"`
	EndDeviceLFDI   string    `xml:"endDeviceLFDI"`
	Status          uint8     `xml:"status"`
	Subject         *MRIDType `xml:"subject"`
	*Resource
}

// ResponseList is A List element to hold Response objects.
type ResponseList struct {
	Response []*Response `xml:"Response"`
	*List
}

// ResponseSet is A container for a ResponseList.
type ResponseSet struct {
	ResponseListLink *ResponseListLink `xml:"ResponseListLink"`
	*IdentifiedObject
}

// ResponseSetList is A List element to hold ResponseSet objects.
type ResponseSetList struct {
	PollRateAttr uint32         `xml:"pollRate,attr,omitempty"`
	ResponseSet  []*ResponseSet `xml:"ResponseSet"`
	*List
}

// TextResponse is A response to a text message
type TextResponse struct {
	*Response
}

// Time is Local time zone offset from currentTime. Does not include any daylight savings time offsets. For American time zones, a negative tzOffset SHALL be used (eg, EST = GMT-5 which is -18000).
type Time struct {
	PollRateAttr uint32          `xml:"pollRate,attr,omitempty"`
	CurrentTime  *TimeType       `xml:"currentTime"`
	DstEndTime   *TimeType       `xml:"dstEndTime"`
	DstOffset    *TimeOffsetType `xml:"dstOffset"`
	DstStartTime *TimeType       `xml:"dstStartTime"`
	LocalTime    *TimeType       `xml:"localTime"`
	Quality      uint8           `xml:"quality"`
	TzOffset     *TimeOffsetType `xml:"tzOffset"`
	*Resource
}

// DeviceInformation is Currently running software version
type DeviceInformation struct {
	PollRateAttr            uint32                   `xml:"pollRate,attr,omitempty"`
	DRLCCapabilities        *DRLCCapabilities        `xml:"DRLCCapabilities"`
	FunctionsImplemented    string                   `xml:"functionsImplemented"`
	GpsLocation             *GPSLocationType         `xml:"gpsLocation"`
	LFDI                    string                   `xml:"lFDI"`
	MfDate                  *TimeType                `xml:"mfDate"`
	MfHwVer                 string                   `xml:"mfHwVer"`
	MfID                    *PENType                 `xml:"mfID"`
	MfInfo                  string                   `xml:"mfInfo"`
	MfModel                 string                   `xml:"mfModel"`
	MfSerNum                string                   `xml:"mfSerNum"`
	PrimaryPower            *PowerSourceType         `xml:"primaryPower"`
	SecondaryPower          *PowerSourceType         `xml:"secondaryPower"`
	SupportedLocaleListLink *SupportedLocaleListLink `xml:"SupportedLocaleListLink"`
	SwActTime               *TimeType                `xml:"swActTime"`
	SwVer                   string                   `xml:"swVer"`
	*Resource
}

// DRLCCapabilities is Bitmap indicating the DRLC options implemented by the device.
// 0 - Target reduction (kWh)
// 1 - Target reduction (kW)
// 2 - Target reduction (Watts)
// 3 - Target reduction (Cubic Meters)
// 4 - Target reduction (Cubic Feet)
// 5 - Target reduction (US Gallons)
// 6 - Target reduction (Imperial Gallons)
// 7 - Target reduction (BTUs)
// 8 - Target reduction (Liters)
// 9 - Target reduction (kPA (gauge))
// 10 - Target reduction (kPA (absolute))
// 11 - Target reduction (Mega Joule)
// 12 - Target reduction (Unitless)
// 13-15 - Reserved
// 16 - Temperature set point
// 17 - Temperature offset
// 18 - Duty cycle
// 19 - Load adjustment percentage
// 20 - Appliance load reduction
// 21-31 - Reserved
type DRLCCapabilities struct {
	AverageEnergy      *RealEnergy  `xml:"averageEnergy"`
	MaxDemand          *ActivePower `xml:"maxDemand"`
	OptionsImplemented string       `xml:"optionsImplemented"`
}

// SupportedLocale is The code for a locale that is supported
type SupportedLocale struct {
	Locale *LocaleType `xml:"locale"`
	*Resource
}

// SupportedLocaleList is A List element to hold SupportedLocale objects.
type SupportedLocaleList struct {
	SupportedLocale []*SupportedLocale `xml:"SupportedLocale"`
	*List
}

// PowerStatus is If the device has a battery, this is the total time the device has been on battery power, in seconds. It may be reset when the battery is replaced.
type PowerStatus struct {
	PollRateAttr             uint32           `xml:"pollRate,attr,omitempty"`
	BatteryStatus            uint8            `xml:"batteryStatus"`
	ChangedTime              *TimeType        `xml:"changedTime"`
	CurrentPowerSource       *PowerSourceType `xml:"currentPowerSource"`
	EstimatedChargeRemaining *PerCent         `xml:"estimatedChargeRemaining"`
	EstimatedTimeRemaining   uint32           `xml:"estimatedTimeRemaining"`
	PEVInfo                  *PEVInfo         `xml:"PEVInfo"`
	SessionTimeOnBattery     uint32           `xml:"sessionTimeOnBattery"`
	TotalTimeOnBattery       uint32           `xml:"totalTimeOnBattery"`
	*Resource
}

// PowerSourceType is 0 - none
// 1 - mains
// 2 - battery
// 3 - local generation
// 4 - emergency
// 5 - unknown
// All other values reserved.
type PowerSourceType struct {
	*UInt8
}

// PEVInfo is This is the time that the parameters are updated, except for changes to TCIN.
type PEVInfo struct {
	ChargingPowerNow        *ActivePower `xml:"chargingPowerNow"`
	EnergyRequestNow        *RealEnergy  `xml:"energyRequestNow"`
	MaxForwardPower         *ActivePower `xml:"maxForwardPower"`
	MinimumChargingDuration uint32       `xml:"minimumChargingDuration"`
	TargetStateOfCharge     *PerCent     `xml:"targetStateOfCharge"`
	TimeChargeIsNeeded      *TimeType    `xml:"timeChargeIsNeeded"`
	TimeChargingStatusPEV   *TimeType    `xml:"timeChargingStatusPEV"`
}

// IEEE802154 is As defined by IEEE 802.15.4
type IEEE802154 struct {
	XMLName          xml.Name          `xml:"IEEE_802_15_4"`
	CapabilityInfo   string            `xml:"capabilityInfo"`
	NeighborListLink *NeighborListLink `xml:"NeighborListLink"`
	ShortAddress     uint16            `xml:"shortAddress"`
}

// IPAddr is An IP address value.
type IPAddr struct {
	Address             string               `xml:"address"`
	RPLInstanceListLink *RPLInstanceListLink `xml:"RPLInstanceListLink"`
	*Resource
}

// IPAddrList is List of IPAddr instances.
type IPAddrList struct {
	IPAddr []*IPAddr `xml:"IPAddr"`
	*List
}

// IPInterface is The date/time of the reported status.
type IPInterface struct {
	IfDescr             string               `xml:"ifDescr"`
	IfHighSpeed         uint32               `xml:"ifHighSpeed"`
	IfInBroadcastPkts   uint32               `xml:"ifInBroadcastPkts"`
	IfIndex             uint32               `xml:"ifIndex"`
	IfInDiscards        uint32               `xml:"ifInDiscards"`
	IfInErrors          uint32               `xml:"ifInErrors"`
	IfInMulticastPkts   uint32               `xml:"ifInMulticastPkts"`
	IfInOctets          uint32               `xml:"ifInOctets"`
	IfInUcastPkts       uint32               `xml:"ifInUcastPkts"`
	IfInUnknownProtos   uint32               `xml:"ifInUnknownProtos"`
	IfMtu               uint32               `xml:"ifMtu"`
	IfName              string               `xml:"ifName"`
	IfOperStatus        uint8                `xml:"ifOperStatus"`
	IfOutBroadcastPkts  uint32               `xml:"ifOutBroadcastPkts"`
	IfOutDiscards       uint32               `xml:"ifOutDiscards"`
	IfOutErrors         uint32               `xml:"ifOutErrors"`
	IfOutMulticastPkts  uint32               `xml:"ifOutMulticastPkts"`
	IfOutOctets         uint32               `xml:"ifOutOctets"`
	IfOutUcastPkts      uint32               `xml:"ifOutUcastPkts"`
	IfPromiscuousMode   bool                 `xml:"ifPromiscuousMode"`
	IfSpeed             uint32               `xml:"ifSpeed"`
	IfType              uint16               `xml:"ifType"`
	IPAddrListLink      *IPAddrListLink      `xml:"IPAddrListLink"`
	LastResetTime       int64                `xml:"lastResetTime"`
	LastUpdatedTime     int64                `xml:"lastUpdatedTime"`
	LLInterfaceListLink *LLInterfaceListLink `xml:"LLInterfaceListLink"`
	*Resource
}

// IPInterfaceList is List of IPInterface instances.
type IPInterfaceList struct {
	PollRateAttr uint32         `xml:"pollRate,attr,omitempty"`
	IPInterface  []*IPInterface `xml:"IPInterface"`
	*List
}

// LLInterface is Number of receive security errors.
type LLInterface struct {
	CRCerrors         uint32      `xml:"CRCerrors"`
	EUI64             string      `xml:"EUI64"`
	IEEE802154        *IEEE802154 `xml:"IEEE_802_15_4"`
	LinkLayerType     uint8       `xml:"linkLayerType"`
	LLAckNotRx        uint32      `xml:"LLAckNotRx"`
	LLCSMAFail        uint32      `xml:"LLCSMAFail"`
	LLFramesDropRx    uint32      `xml:"LLFramesDropRx"`
	LLFramesDropTx    uint32      `xml:"LLFramesDropTx"`
	LLFramesRx        uint32      `xml:"LLFramesRx"`
	LLFramesTx        uint32      `xml:"LLFramesTx"`
	LLMediaAccessFail uint32      `xml:"LLMediaAccessFail"`
	LLOctetsRx        uint32      `xml:"LLOctetsRx"`
	LLOctetsTx        uint32      `xml:"LLOctetsTx"`
	LLRetryCount      uint32      `xml:"LLRetryCount"`
	LLSecurityErrorRx uint32      `xml:"LLSecurityErrorRx"`
	LoWPAN            *LoWPAN     `xml:"loWPAN"`
	*Resource
}

// LLInterfaceList is List of LLInterface instances.
type LLInterfaceList struct {
	LLInterface []*LLInterface `xml:"LLInterface"`
	*List
}

// LoWPAN is Number of errors receiving fragments
type LoWPAN struct {
	XMLName     xml.Name `xml:"loWPAN"`
	OctetsRx    uint32   `xml:"octetsRx"`
	OctetsTx    uint32   `xml:"octetsTx"`
	PacketsRx   uint32   `xml:"packetsRx"`
	PacketsTx   uint32   `xml:"packetsTx"`
	RxFragError uint32   `xml:"rxFragError"`
}

// Neighbor is As defined by IEEE 802.15.4
type Neighbor struct {
	IsChild      bool   `xml:"isChild"`
	LinkQuality  uint8  `xml:"linkQuality"`
	ShortAddress uint16 `xml:"shortAddress"`
	*Resource
}

// NeighborList is List of 15.4 neighbors.
type NeighborList struct {
	Neighbor []*Neighbor `xml:"Neighbor"`
	*List
}

// RPLInstance is See [RFC 6550].
type RPLInstance struct {
	DODAGid                 uint8                    `xml:"DODAGid"`
	DODAGroot               bool                     `xml:"DODAGroot"`
	Flags                   uint8                    `xml:"flags"`
	GroundedFlag            bool                     `xml:"groundedFlag"`
	MOP                     uint8                    `xml:"MOP"`
	PRF                     uint8                    `xml:"PRF"`
	Rank                    uint16                   `xml:"rank"`
	RPLInstanceID           uint8                    `xml:"RPLInstanceID"`
	RPLSourceRoutesListLink *RPLSourceRoutesListLink `xml:"RPLSourceRoutesListLink"`
	VersionNumber           uint8                    `xml:"versionNumber"`
	*Resource
}

// RPLInstanceList is List of RPLInstances associated with the IPinterface.
type RPLInstanceList struct {
	RPLInstance []*RPLInstance `xml:"RPLInstance"`
	*List
}

// RPLSourceRoutes is See [RFC 6554].
type RPLSourceRoutes struct {
	DestAddress string `xml:"DestAddress"`
	SourceRoute string `xml:"SourceRoute"`
	*Resource
}

// RPLSourceRoutesList is List or RPL source routes if the hosting device is the DODAGroot
type RPLSourceRoutesList struct {
	RPLSourceRoutes []*RPLSourceRoutes `xml:"RPLSourceRoutes"`
	*List
}

// LogEvent is The profileID identifies which profile (HA, BA, SE, etc) defines the following event information.
// 0Not profile specific.
// 1Vendor Defined
// 2IEEE 2030.5
// 3Home Automation
// 4Building Automation
// All other values are reserved.
type LogEvent struct {
	CreatedDateTime *TimeType `xml:"createdDateTime"`
	Details         string    `xml:"details"`
	ExtendedData    uint32    `xml:"extendedData"`
	FunctionSet     uint8     `xml:"functionSet"`
	LogEventCode    uint8     `xml:"logEventCode"`
	LogEventID      uint16    `xml:"logEventID"`
	LogEventPEN     *PENType  `xml:"logEventPEN"`
	ProfileID       uint8     `xml:"profileID"`
	*Resource
}

// LogEventList is A List element to hold LogEvent objects.
type LogEventList struct {
	PollRateAttr uint32      `xml:"pollRate,attr,omitempty"`
	LogEvent     []*LogEvent `xml:"LogEvent"`
	*SubscribableList
}

// Configuration is User assigned, convenience name used for network browsing displays, etc.  Example "My Thermostat"
type Configuration struct {
	PollRateAttr             uint32                    `xml:"pollRate,attr,omitempty"`
	CurrentLocale            *LocaleType               `xml:"currentLocale"`
	PowerConfiguration       *PowerConfiguration       `xml:"PowerConfiguration"`
	PriceResponseCfgListLink *PriceResponseCfgListLink `xml:"PriceResponseCfgListLink"`
	TimeConfiguration        *TimeConfiguration        `xml:"TimeConfiguration"`
	UserDeviceName           string                    `xml:"userDeviceName"`
	*SubscribableResource
}

// PowerConfiguration is In context of the PowerStatus resource, this is the value of EstimatedTimeRemaining below which BatteryStatus "low" is indicated and the PS_LOW_BATTERY is raised.
type PowerConfiguration struct {
	BatteryInstallTime *TimeType `xml:"batteryInstallTime"`
	LowChargeThreshold uint32    `xml:"lowChargeThreshold"`
}

// PriceResponseCfg is Price responsive clients acting upon the associated RateComponent SHOULD reduce consumption to the maximum extent possible while the price is greater than this threshold.
type PriceResponseCfg struct {
	ConsumeThreshold      int                `xml:"consumeThreshold"`
	MaxReductionThreshold int                `xml:"maxReductionThreshold"`
	RateComponentLink     *RateComponentLink `xml:"RateComponentLink"`
	*Resource
}

// PriceResponseCfgList is A List element to hold PriceResponseCfg objects.
type PriceResponseCfgList struct {
	PriceResponseCfg []*PriceResponseCfg `xml:"PriceResponseCfg"`
	*List
}

// TimeConfiguration is Local time zone offset from UTCTime. Does not include any daylight savings time offsets.
type TimeConfiguration struct {
	DstEndRule   *DstRuleType    `xml:"dstEndRule"`
	DstOffset    *TimeOffsetType `xml:"dstOffset"`
	DstStartRule *DstRuleType    `xml:"dstStartRule"`
	TzOffset     *TimeOffsetType `xml:"tzOffset"`
}

// File is A value indicating the type of the file.  MUST be one of the following values:
// 00 = Software Image
// 01 = Security Credential
// 02 = Configuration
// 03 = Log
// 04–7FFF = reserved
// 8000-FFFF = Manufacturer defined
type File struct {
	ActivateTime *TimeType `xml:"activateTime"`
	FileURI      string    `xml:"fileURI"`
	LFDI         string    `xml:"lFDI"`
	MfHwVer      string    `xml:"mfHwVer"`
	MfID         *PENType  `xml:"mfID"`
	MfModel      string    `xml:"mfModel"`
	MfSerNum     string    `xml:"mfSerNum"`
	MfVer        string    `xml:"mfVer"`
	Size         uint32    `xml:"size"`
	Type         string    `xml:"type"`
	*Resource
}

// FileList is A List element to hold File objects.
type FileList struct {
	PollRateAttr uint32  `xml:"pollRate,attr,omitempty"`
	File         []*File `xml:"File"`
	*List
}

// FileStatus is This element MUST be set to the time at which file status transitioned to the value indicated in the status element.
type FileStatus struct {
	PollRateAttr       uint32    `xml:"pollRate,attr,omitempty"`
	ActivateTime       *TimeType `xml:"activateTime"`
	FileLink           *FileLink `xml:"FileLink"`
	LoadPercent        uint8     `xml:"loadPercent"`
	NextRequestAttempt *TimeType `xml:"nextRequestAttempt"`
	Request503Count    uint16    `xml:"request503Count"`
	RequestFailCount   uint16    `xml:"requestFailCount"`
	Status             uint8     `xml:"status"`
	StatusTime         *TimeType `xml:"statusTime"`
	*Resource
}

// LoadShedAvailabilityList is A List element to hold LoadShedAvailability objects.
type LoadShedAvailabilityList struct {
	PollRateAttr         uint32                  `xml:"pollRate,attr,omitempty"`
	LoadShedAvailability []*LoadShedAvailability `xml:"LoadShedAvailability"`
	*List
}

// ApplianceLoadReduction is Indicates the type of appliance load reduction requested.
type ApplianceLoadReduction struct {
	Type *ApplianceLoadReductionType `xml:"type"`
}

// DemandResponseProgram is Indicates the relative primacy of the provider of this program.
type DemandResponseProgram struct {
	ActiveEndDeviceControlListLink           *ActiveEndDeviceControlListLink `xml:"ActiveEndDeviceControlListLink"`
	AvailabilityUpdatePercentChangeThreshold *PerCent                        `xml:"availabilityUpdatePercentChangeThreshold"`
	AvailabilityUpdatePowerChangeThreshold   *ActivePower                    `xml:"availabilityUpdatePowerChangeThreshold"`
	EndDeviceControlListLink                 *EndDeviceControlListLink       `xml:"EndDeviceControlListLink"`
	Primacy                                  *PrimacyType                    `xml:"primacy"`
	*IdentifiedObject
}

// DemandResponseProgramList is A List element to hold DemandResponseProgram objects.
type DemandResponseProgramList struct {
	PollRateAttr          uint32                   `xml:"pollRate,attr,omitempty"`
	DemandResponseProgram []*DemandResponseProgram `xml:"DemandResponseProgram"`
	*SubscribableList
}

// DutyCycle is Contains the maximum On state duty cycle applied by the end device, as a percentage of time.  The field not present indicates that this field has not been used by the end device.
type DutyCycle struct {
	NormalValue uint8 `xml:"normalValue"`
}

// EndDeviceControl is The overrideDuration attribute provides a duration, in seconds, for which a client device is allowed to override this EndDeviceControl and still meet the contractual agreement with a service provider without opting out. If overrideDuration is not specified, then it SHALL default to 0.
type EndDeviceControl struct {
	ApplianceLoadReduction *ApplianceLoadReduction `xml:"ApplianceLoadReduction"`
	DeviceCategory         *DeviceCategoryType     `xml:"deviceCategory"`
	DrProgramMandatory     bool                    `xml:"drProgramMandatory"`
	DutyCycle              *DutyCycle              `xml:"DutyCycle"`
	LoadShiftForward       bool                    `xml:"loadShiftForward"`
	Offset                 *Offset                 `xml:"Offset"`
	OverrideDuration       uint16                  `xml:"overrideDuration"`
	SetPoint               *SetPoint               `xml:"SetPoint"`
	TargetReduction        *TargetReduction        `xml:"TargetReduction"`
	*RandomizableEvent
}

// EndDeviceControlList is A List element to hold EndDeviceControl objects.
type EndDeviceControlList struct {
	EndDeviceControl []*EndDeviceControl `xml:"EndDeviceControl"`
	*SubscribableList
}

// LoadShedAvailability is Maximum amount of current operating load that is estimated to be sheddable, in Watts.
type LoadShedAvailability struct {
	AvailabilityDuration      uint32                     `xml:"availabilityDuration"`
	DemandResponseProgramLink *DemandResponseProgramLink `xml:"DemandResponseProgramLink"`
	SheddablePercent          *PerCent                   `xml:"sheddablePercent"`
	SheddablePower            *ActivePower               `xml:"sheddablePower"`
	*Resource
}

// Offset is The value change requested for the load adjustment percentage. The value should be subtracted from the normal setting, or if loadShiftForward is true, then the value should be added to the normal setting.
type Offset struct {
	CoolingOffset                  uint8    `xml:"coolingOffset"`
	HeatingOffset                  uint8    `xml:"heatingOffset"`
	LoadAdjustmentPercentageOffset *PerCent `xml:"loadAdjustmentPercentageOffset"`
}

// SetPoint is This attribute represents the heating temperature set point in degrees Celsius / 100. (Hundredths of a degree C)
type SetPoint struct {
	CoolingSetpoint int16 `xml:"coolingSetpoint"`
	HeatingSetpoint int16 `xml:"heatingSetpoint"`
}

// TargetReduction is Indicates the requested amount of the relevant commodity to be reduced.
type TargetReduction struct {
	Type  *UnitType `xml:"type"`
	Value uint16    `xml:"value"`
}

// MeterReading is Set of values obtained from the meter.
type MeterReading struct {
	RateComponentListLink *RateComponentListLink `xml:"RateComponentListLink"`
	ReadingLink           *ReadingLink           `xml:"ReadingLink"`
	ReadingSetListLink    *ReadingSetListLink    `xml:"ReadingSetListLink"`
	ReadingTypeLink       *ReadingTypeLink       `xml:"ReadingTypeLink"`
	*MeterReadingBase
}

// MeterReadingList is A List element to hold MeterReading objects.
type MeterReadingList struct {
	MeterReading []*MeterReading `xml:"MeterReading"`
	*SubscribableList
}

// Reading is The local identifier for this reading within the reading set. localIDs are assigned in order of creation time. For interval data, this value SHALL increase with each interval time, and for block/tier readings, localID SHALL not be specified.
type Reading struct {
	SubscribableAttr *UInt8 `xml:"subscribable,attr,omitempty"`
	LocalID          string `xml:"localID"`
	*ReadingBase
}

// ReadingList is A List element to hold Reading objects.
type ReadingList struct {
	Reading []*Reading `xml:"Reading"`
	*SubscribableList
}

// ReadingSet is A set of Readings of the ReadingType indicated by the parent MeterReading.
type ReadingSet struct {
	ReadingListLink *ReadingListLink `xml:"ReadingListLink"`
	*ReadingSetBase
}

// ReadingSetList is A List element to hold ReadingSet objects.
type ReadingSetList struct {
	ReadingSet []*ReadingSet `xml:"ReadingSet"`
	*SubscribableList
}

// ReadingType is Indicates the measurement type for the units of measure for the readings of this type.
type ReadingType struct {
	AccumulationBehaviour     *AccumulationBehaviourType `xml:"accumulationBehaviour"`
	CalorificValue            *UnitValueType             `xml:"calorificValue"`
	Commodity                 *CommodityType             `xml:"commodity"`
	ConversionFactor          *UnitValueType             `xml:"conversionFactor"`
	DataQualifier             *DataQualifierType         `xml:"dataQualifier"`
	FlowDirection             *FlowDirectionType         `xml:"flowDirection"`
	IntervalLength            uint32                     `xml:"intervalLength"`
	Kind                      *KindType                  `xml:"kind"`
	MaxNumberOfIntervals      uint8                      `xml:"maxNumberOfIntervals"`
	NumberOfConsumptionBlocks uint8                      `xml:"numberOfConsumptionBlocks"`
	NumberOfTouTiers          uint8                      `xml:"numberOfTouTiers"`
	Phase                     *PhaseCode                 `xml:"phase"`
	PowerOfTenMultiplier      *PowerOfTenMultiplierType  `xml:"powerOfTenMultiplier"`
	SubIntervalLength         uint32                     `xml:"subIntervalLength"`
	SupplyLimit               uint64                     `xml:"supplyLimit"`
	TieredConsumptionBlocks   bool                       `xml:"tieredConsumptionBlocks"`
	Uom                       *UomType                   `xml:"uom"`
	*Resource
}

// UsagePoint is The LFDI of the source device. This attribute SHALL be present when mirroring.
type UsagePoint struct {
	DeviceLFDI           string                `xml:"deviceLFDI"`
	MeterReadingListLink *MeterReadingListLink `xml:"MeterReadingListLink"`
	*UsagePointBase
}

// UsagePointList is A List element to hold UsagePoint objects.
type UsagePointList struct {
	PollRateAttr uint32        `xml:"pollRate,attr,omitempty"`
	UsagePoint   []*UsagePoint `xml:"UsagePoint"`
	*SubscribableList
}

// ConsumptionTariffInterval is The lowest level of consumption that defines the starting point of this consumption step or block. Thresholds start at zero for each billing period.
//
// If specified, the first ConsumptionTariffInterval.startValue for a TimeTariffInteral instance SHALL begin at "0." Subsequent ConsumptionTariffInterval.startValue elements SHALL be greater than the previous one.
type ConsumptionTariffInterval struct {
	ConsumptionBlock  *ConsumptionBlockType `xml:"consumptionBlock"`
	EnvironmentalCost []*EnvironmentalCost  `xml:"EnvironmentalCost"`
	Price             int                   `xml:"price"`
	StartValue        uint64                `xml:"startValue"`
	*Resource
}

// ConsumptionTariffIntervalList is A List element to hold ConsumptionTariffInterval objects.
type ConsumptionTariffIntervalList struct {
	ConsumptionTariffInterval []*ConsumptionTariffInterval `xml:"ConsumptionTariffInterval"`
	*List
}

// CostKindType is 0 - Carbon Dioxide emissions, in grams per unit
// 1 - Sulfur Dioxide emissions, in grams per unit
// 2 - Nitrogen Oxides emissions, in grams per unit
// 3 - Renewable generation, as a percentage of overall generation
// All other values reserved.
type CostKindType struct {
	*UInt8
}

// EnvironmentalCost is The number of all relative cost levels.
//
// In conjunction with costLevel, numCostLevels signals the relative scarcity of the commodity for the duration of the TimeTariffInterval instance (e.g., a relative indication of cost). This is useful in providing context for nominal cost signals to consumers or devices that might see a range of amount values from different service providres or from the same service provider.
type EnvironmentalCost struct {
	Amount        uint32        `xml:"amount"`
	CostKind      *CostKindType `xml:"costKind"`
	CostLevel     uint8         `xml:"costLevel"`
	NumCostLevels uint8         `xml:"numCostLevels"`
}

// RateComponent is Specifies the roles that this usage point has been assigned.
type RateComponent struct {
	ActiveTimeTariffIntervalListLink *ActiveTimeTariffIntervalListLink `xml:"ActiveTimeTariffIntervalListLink"`
	FlowRateEndLimit                 *UnitValueType                    `xml:"flowRateEndLimit"`
	FlowRateStartLimit               *UnitValueType                    `xml:"flowRateStartLimit"`
	ReadingTypeLink                  *ReadingTypeLink                  `xml:"ReadingTypeLink"`
	RoleFlags                        *RoleFlagsType                    `xml:"roleFlags"`
	TimeTariffIntervalListLink       *TimeTariffIntervalListLink       `xml:"TimeTariffIntervalListLink"`
	*IdentifiedObject
}

// RateComponentList is A List element to hold RateComponent objects.
type RateComponentList struct {
	RateComponent []*RateComponent `xml:"RateComponent"`
	*List
}

// TariffProfile is The kind of service provided by this usage point.
type TariffProfile struct {
	Currency                  *CurrencyCode             `xml:"currency"`
	PricePowerOfTenMultiplier *PowerOfTenMultiplierType `xml:"pricePowerOfTenMultiplier"`
	Primacy                   *PrimacyType              `xml:"primacy"`
	RateCode                  string                    `xml:"rateCode"`
	RateComponentListLink     *RateComponentListLink    `xml:"RateComponentListLink"`
	ServiceCategoryKind       *ServiceKind              `xml:"serviceCategoryKind"`
	*IdentifiedObject
}

// TariffProfileList is A List element to hold TariffProfile objects.
type TariffProfileList struct {
	PollRateAttr  uint32           `xml:"pollRate,attr,omitempty"`
	TariffProfile []*TariffProfile `xml:"TariffProfile"`
	*SubscribableList
}

// TimeTariffInterval is Indicates the time of use tier related to the reading. If not specified, is assumed to be "0 - N/A".
type TimeTariffInterval struct {
	ConsumptionTariffIntervalListLink *ConsumptionTariffIntervalListLink `xml:"ConsumptionTariffIntervalListLink"`
	TouTier                           *TOUType                           `xml:"touTier"`
	*RandomizableEvent
}

// TimeTariffIntervalList is A List element to hold TimeTariffInterval objects.
type TimeTariffIntervalList struct {
	TimeTariffInterval []*TimeTariffInterval `xml:"TimeTariffInterval"`
	*SubscribableList
}

// MessagingProgram is Indicates the relative primacy of the provider of this program.
type MessagingProgram struct {
	ActiveTextMessageListLink *ActiveTextMessageListLink `xml:"ActiveTextMessageListLink"`
	Locale                    *LocaleType                `xml:"locale"`
	Primacy                   *PrimacyType               `xml:"primacy"`
	TextMessageListLink       *TextMessageListLink       `xml:"TextMessageListLink"`
	*SubscribableIdentifiedObject
}

// MessagingProgramList is A List element to hold MessagingProgram objects.
type MessagingProgramList struct {
	PollRateAttr     uint32              `xml:"pollRate,attr,omitempty"`
	MessagingProgram []*MessagingProgram `xml:"MessagingProgram"`
	*SubscribableList
}

// PriorityType is Indicates the priority of a message:
// 0 - Low
// 1 - Normal
// 2 - High
// 3 - Critical
// All other values reserved.
type PriorityType struct {
	*UInt8
}

// TextMessage is The textMessage attribute contains the actual UTF-8 encoded text to be displayed in conjunction with the messageLength attribute which contains the overall length of the textMessage attribute.  Clients and servers SHALL support a reception of a Message of 100 bytes in length.  Messages that exceed the clients display size will be left to the client to choose what method to handle the message (truncation, scrolling, etc.).
type TextMessage struct {
	Originator  string        `xml:"originator"`
	Priority    *PriorityType `xml:"priority"`
	TextMessage string        `xml:"textMessage"`
	*Event
}

// TextMessageList is A List element to hold TextMessage objects.
type TextMessageList struct {
	TextMessage []*TextMessage `xml:"TextMessage"`
	*SubscribableList
}

// BillingPeriod is The date / time of the last update of this resource.
type BillingPeriod struct {
	BillLastPeriod  int64             `xml:"billLastPeriod"`
	BillToDate      int64             `xml:"billToDate"`
	Interval        *DateTimeInterval `xml:"interval"`
	StatusTimeStamp *TimeType         `xml:"statusTimeStamp"`
	*Resource
}

// BillingPeriodList is A List element to hold BillingPeriod objects.
type BillingPeriodList struct {
	BillingPeriod []*BillingPeriod `xml:"BillingPeriod"`
	*SubscribableList
}

// BillingMeterReadingBase is Contains historical, target, and projection readings of various types, possibly associated with charges.
type BillingMeterReadingBase struct {
	BillingReadingSetListLink *BillingReadingSetListLink `xml:"BillingReadingSetListLink"`
	ReadingTypeLink           *ReadingTypeLink           `xml:"ReadingTypeLink"`
	*MeterReadingBase
}

// BillingReading is Data captured at regular intervals of time. Interval data could be captured as incremental data, absolute data, or relative data. The source for the data is usually a tariff quantity or an engineering quantity. Data is typically captured in time-tagged, uniform, fixed-length intervals of 5 min, 10 min, 15 min, 30 min, or 60 min. However, consumption aggregations can also be represented with this class.
type BillingReading struct {
	Charge []*Charge `xml:"Charge"`
	*ReadingBase
}

// BillingReadingList is A List element to hold BillingReading objects.
type BillingReadingList struct {
	BillingReading []*BillingReading `xml:"BillingReading"`
	*List
}

// BillingReadingSet is Time sequence of readings of the same reading type.
type BillingReadingSet struct {
	BillingReadingListLink *BillingReadingListLink `xml:"BillingReadingListLink"`
	*ReadingSetBase
}

// BillingReadingSetList is A List element to hold BillingReadingSet objects.
type BillingReadingSetList struct {
	BillingReadingSet []*BillingReadingSet `xml:"BillingReadingSet"`
	*SubscribableList
}

// Charge is A monetary charge.
type Charge struct {
	Description string      `xml:"description"`
	Kind        *ChargeKind `xml:"kind"`
	Value       int         `xml:"value"`
}

// ChargeKind is Kind of charge.
// 0 - Consumption Charge
// 1 - Rebate
// 2 - Auxiliary Charge
// 3 - Demand Charge
// 4 - Tax Charge
type ChargeKind struct {
	*UInt8
}

// CustomerAccount is Indicates the power of ten multiplier for the prices in this function set.
type CustomerAccount struct {
	Currency                  uint16                     `xml:"currency"`
	CustomerAccount           string                     `xml:"customerAccount"`
	CustomerAgreementListLink *CustomerAgreementListLink `xml:"CustomerAgreementListLink"`
	CustomerName              string                     `xml:"customerName"`
	PricePowerOfTenMultiplier *PowerOfTenMultiplierType  `xml:"pricePowerOfTenMultiplier"`
	ServiceSupplierLink       *ServiceSupplierLink       `xml:"ServiceSupplierLink"`
	*IdentifiedObject
}

// CustomerAccountList is A List element to hold CustomerAccount objects.
type CustomerAccountList struct {
	PollRateAttr    uint32             `xml:"pollRate,attr,omitempty"`
	CustomerAccount []*CustomerAccount `xml:"CustomerAccount"`
	*SubscribableList
}

// CustomerAgreement is The address or textual description of the service location.
type CustomerAgreement struct {
	ActiveBillingPeriodListLink     *ActiveBillingPeriodListLink     `xml:"ActiveBillingPeriodListLink"`
	ActiveProjectionReadingListLink *ActiveProjectionReadingListLink `xml:"ActiveProjectionReadingListLink"`
	ActiveTargetReadingListLink     *ActiveTargetReadingListLink     `xml:"ActiveTargetReadingListLink"`
	BillingPeriodListLink           *BillingPeriodListLink           `xml:"BillingPeriodListLink"`
	HistoricalReadingListLink       *HistoricalReadingListLink       `xml:"HistoricalReadingListLink"`
	PrepaymentLink                  *PrepaymentLink                  `xml:"PrepaymentLink"`
	ProjectionReadingListLink       *ProjectionReadingListLink       `xml:"ProjectionReadingListLink"`
	ServiceAccount                  string                           `xml:"serviceAccount"`
	ServiceLocation                 string                           `xml:"serviceLocation"`
	TargetReadingListLink           *TargetReadingListLink           `xml:"TargetReadingListLink"`
	TariffProfileLink               *TariffProfileLink               `xml:"TariffProfileLink"`
	UsagePointLink                  *UsagePointLink                  `xml:"UsagePointLink"`
	*IdentifiedObject
}

// CustomerAgreementList is A List element to hold CustomerAgreement objects.
type CustomerAgreementList struct {
	CustomerAgreement []*CustomerAgreement `xml:"CustomerAgreement"`
	*SubscribableList
}

// HistoricalReading is To be used to present readings that have been processed and possibly corrected (as allowed, due to missing or incorrect data) by backend systems. This includes quality codes valid, verified, estimated, and derived / corrected.
type HistoricalReading struct {
	*BillingMeterReadingBase
}

// HistoricalReadingList is A List element to hold HistoricalReading objects.
type HistoricalReadingList struct {
	HistoricalReading []*HistoricalReading `xml:"HistoricalReading"`
	*List
}

// ProjectionReading is Contains values that forecast a future reading for the time or interval specified.
type ProjectionReading struct {
	*BillingMeterReadingBase
}

// ProjectionReadingList is A List element to hold ProjectionReading objects.
type ProjectionReadingList struct {
	ProjectionReading []*ProjectionReading `xml:"ProjectionReading"`
	*List
}

// TargetReading is Contains readings that specify a target or goal, such as a consumption target, to which billing incentives or other contractual ramifications may be associated.
type TargetReading struct {
	*BillingMeterReadingBase
}

// TargetReadingList is A List element to hold TargetReading objects.
type TargetReadingList struct {
	TargetReading []*TargetReading `xml:"TargetReading"`
	*List
}

// ServiceSupplier is Website URI address for this service supplier.
type ServiceSupplier struct {
	Email      string `xml:"email"`
	Phone      string `xml:"phone"`
	ProviderID uint32 `xml:"providerID"`
	Web        string `xml:"web"`
	*IdentifiedObject
}

// ServiceSupplierList is A List element to hold ServiceSupplier objects.
type ServiceSupplierList struct {
	ServiceSupplier []*ServiceSupplier `xml:"ServiceSupplier"`
	*List
}

// AccountBalance is EmergencyCreditStatus identifies whether the present value of emergencyCredit is considered OK, low, exhausted, or negative.
type AccountBalance struct {
	AvailableCredit       *AccountingUnit   `xml:"availableCredit"`
	CreditStatus          *CreditStatusType `xml:"creditStatus"`
	EmergencyCredit       *AccountingUnit   `xml:"emergencyCredit"`
	EmergencyCreditStatus *CreditStatusType `xml:"emergencyCreditStatus"`
	*Resource
}

// AccountingUnit is Value of the monetary aspect
type AccountingUnit struct {
	EnergyUnit   *RealEnergy               `xml:"energyUnit"`
	MonetaryUnit *CurrencyCode             `xml:"monetaryUnit"`
	Multiplier   *PowerOfTenMultiplierType `xml:"multiplier"`
	Value        int                       `xml:"value"`
}

// CreditRegister is Token is security data that authenticates the legitimacy of the transaction. The details of this token are not defined by IEEE 2030.5. How a Prepayment server handles this field is left as vendor specific implementation or will be defined by one or more other standards.
type CreditRegister struct {
	CreditAmount  *AccountingUnit `xml:"creditAmount"`
	CreditType    *CreditTypeType `xml:"creditType"`
	EffectiveTime *TimeType       `xml:"effectiveTime"`
	Token         string          `xml:"token"`
	*IdentifiedObject
}

// CreditRegisterList is A List element to hold CreditRegister objects.
type CreditRegisterList struct {
	CreditRegister []*CreditRegister `xml:"CreditRegister"`
	*List
}

// Prepayment is PrepayMode specifies whether the given Prepayment instance is operating in Credit, Central Wallet, ESI, or Local prepayment mode. The Credit mode indicates that prepayment is not presently in effect. The other modes are described in the Overview Section above.
type Prepayment struct {
	AccountBalanceLink                       *AccountBalanceLink                       `xml:"AccountBalanceLink"`
	ActiveCreditRegisterListLink             *ActiveCreditRegisterListLink             `xml:"ActiveCreditRegisterListLink"`
	ActiveSupplyInterruptionOverrideListLink *ActiveSupplyInterruptionOverrideListLink `xml:"ActiveSupplyInterruptionOverrideListLink"`
	CreditExpiryLevel                        *AccountingUnit                           `xml:"creditExpiryLevel"`
	CreditRegisterListLink                   *CreditRegisterListLink                   `xml:"CreditRegisterListLink"`
	LowCreditWarningLevel                    *AccountingUnit                           `xml:"lowCreditWarningLevel"`
	LowEmergencyCreditWarningLevel           *AccountingUnit                           `xml:"lowEmergencyCreditWarningLevel"`
	PrepayMode                               *PrepayModeType                           `xml:"prepayMode"`
	PrepayOperationStatusLink                *PrepayOperationStatusLink                `xml:"PrepayOperationStatusLink"`
	SupplyInterruptionOverrideListLink       *SupplyInterruptionOverrideListLink       `xml:"SupplyInterruptionOverrideListLink"`
	UsagePoint                               []*UsagePoint                             `xml:"UsagePoint"`
	UsagePointLink                           *UsagePointLink                           `xml:"UsagePointLink"`
	*IdentifiedObject
}

// PrepaymentList is A List element to hold Prepayment objects.
type PrepaymentList struct {
	PollRateAttr uint32        `xml:"pollRate,attr,omitempty"`
	Prepayment   []*Prepayment `xml:"Prepayment"`
	*SubscribableList
}

// PrepayModeType is 0 - Central Wallet
// 1 - ESI
// 2 - Local
// 3 - Credit
// All other values reserved.
type PrepayModeType struct {
	*UInt8
}

// PrepayOperationStatus is ServiceStatus identifies whether the service is connected or disconnected, or armed for connection or disconnection.
type PrepayOperationStatus struct {
	CreditTypeChange *CreditTypeChange  `xml:"creditTypeChange"`
	CreditTypeInUse  *CreditTypeType    `xml:"creditTypeInUse"`
	ServiceChange    *ServiceChange     `xml:"serviceChange"`
	ServiceStatus    *ServiceStatusType `xml:"serviceStatus"`
	*Resource
}

// ServiceChange is The date/time when the change is to take effect.
type ServiceChange struct {
	NewStatus *ServiceStatusType `xml:"newStatus"`
	StartTime *TimeType          `xml:"startTime"`
}

// SupplyInterruptionOverride is Interval defines the period of time during which supply should not be interrupted.
type SupplyInterruptionOverride struct {
	Description string            `xml:"description"`
	Interval    *DateTimeInterval `xml:"interval"`
	*Resource
}

// SupplyInterruptionOverrideList is A List element to hold SupplyInterruptionOverride objects.
type SupplyInterruptionOverrideList struct {
	SupplyInterruptionOverride []*SupplyInterruptionOverride `xml:"SupplyInterruptionOverride"`
	*List
}

// CreditStatusType is 0 - Credit Ok
// 1 - Credit Low
// 2 - Credit Exhausted
// 3 - Credit Negative
// All other values reserved.
type CreditStatusType struct {
	*UInt8
}

// CreditTypeType is 0 - Regular
// 1 - Emergency
// 2 - Regular, then Emergency
// 3 - Emergency, then Regular
// All other values reserved.
type CreditTypeType struct {
	*UInt8
}

// CreditTypeChange is The date/time when the change is to take effect.
type CreditTypeChange struct {
	NewType   *CreditTypeType `xml:"newType"`
	StartTime *TimeType       `xml:"startTime"`
}

// ServiceStatusType is 0 - Connected
// 1 - Disconnected
// 2 - Armed for Connect
// 3 - Armed for Disconnect
// 4 - No Contactor
// 5 - Load Limited
// All other values reserved.
type ServiceStatusType struct {
	*UInt8
}

// RequestStatus is Field representing the request status type.
// 0 = Requested
// 1 = Cancelled
// All other values reserved.
type RequestStatus struct {
	DateTime      *TimeType `xml:"dateTime"`
	RequestStatus uint8     `xml:"requestStatus"`
}

// FlowReservationRequest is Indicates the sustained level of power, in Watts, that is requested. For charging this is calculated by the storage device and it represents the charging system capability (which for an electric vehicle must also account for any power limitations due to the EVSE control pilot). For discharging, a lower value than the inverter capability can be used as a target.
type FlowReservationRequest struct {
	CreationTime      *TimeType         `xml:"creationTime"`
	DurationRequested uint16            `xml:"durationRequested"`
	EnergyRequested   *SignedRealEnergy `xml:"energyRequested"`
	IntervalRequested *DateTimeInterval `xml:"intervalRequested"`
	PowerRequested    *ActivePower      `xml:"powerRequested"`
	RequestStatus     *RequestStatus    `xml:"RequestStatus"`
	*IdentifiedObject
}

// FlowReservationRequestList is A List element to hold FlowReservationRequest objects.
type FlowReservationRequestList struct {
	PollRateAttr           uint32                    `xml:"pollRate,attr,omitempty"`
	FlowReservationRequest []*FlowReservationRequest `xml:"FlowReservationRequest"`
	*List
}

// FlowReservationResponse is The subject field provides a method to match the response with the originating event. It is populated with the mRID of the corresponding FlowReservationRequest object.
type FlowReservationResponse struct {
	EnergyAvailable *SignedRealEnergy `xml:"energyAvailable"`
	PowerAvailable  *ActivePower      `xml:"powerAvailable"`
	Subject         *MRIDType         `xml:"subject"`
	*Event
}

// FlowReservationResponseList is A List element to hold FlowReservationResponse objects.
type FlowReservationResponseList struct {
	PollRateAttr            uint32                     `xml:"pollRate,attr,omitempty"`
	FlowReservationResponse []*FlowReservationResponse `xml:"FlowReservationResponse"`
	*SubscribableList
}

// DefaultDERControl is Set soft-start rate of change (soft-start ramp rate) of active power output due to command or internal action, defined in %setWMax / second.  Resolution is in hundredths of a percent/second. A value of 0 means there is no limit. Interpreted as a percentage change in output capability limit per second when used as a ramp rate. When present, this value SHALL update the value of the corresponding setting (DERSettings::setSoftGradW).
type DefaultDERControl struct {
	DERControlBase   *DERControlBase `xml:"DERControlBase"`
	SetESDelay       uint32          `xml:"setESDelay"`
	SetESHighFreq    uint16          `xml:"setESHighFreq"`
	SetESHighVolt    int16           `xml:"setESHighVolt"`
	SetESLowFreq     uint16          `xml:"setESLowFreq"`
	SetESLowVolt     int16           `xml:"setESLowVolt"`
	SetESRampTms     uint32          `xml:"setESRampTms"`
	SetESRandomDelay uint32          `xml:"setESRandomDelay"`
	SetGradW         uint16          `xml:"setGradW"`
	SetSoftGradW     uint16          `xml:"setSoftGradW"`
	*SubscribableIdentifiedObject
}

// FreqDroopType is Open loop response time, the duration from a step change in control signal input until the output changes by 90% of its final change before any overshoot, in hundredths of a second. Resolution is 1/100 sec. A value of 0 is used to mean no limit.
type FreqDroopType struct {
	DBOF        uint32 `xml:"dBOF"`
	DBUF        uint32 `xml:"dBUF"`
	KOF         uint16 `xml:"kOF"`
	KUF         uint16 `xml:"kUF"`
	OpenLoopTms uint16 `xml:"openLoopTms"`
}

// DER is Contains links to DER resources.
type DER struct {
	AssociatedDERProgramListLink *AssociatedDERProgramListLink `xml:"AssociatedDERProgramListLink"`
	AssociatedUsagePointLink     *AssociatedUsagePointLink     `xml:"AssociatedUsagePointLink"`
	CurrentDERProgramLink        *CurrentDERProgramLink        `xml:"CurrentDERProgramLink"`
	DERAvailabilityLink          *DERAvailabilityLink          `xml:"DERAvailabilityLink"`
	DERCapabilityLink            *DERCapabilityLink            `xml:"DERCapabilityLink"`
	DERSettingsLink              *DERSettingsLink              `xml:"DERSettingsLink"`
	DERStatusLink                *DERStatusLink                `xml:"DERStatusLink"`
	*SubscribableResource
}

// DERList is A List element to hold DER objects.
type DERList struct {
	PollRateAttr uint32 `xml:"pollRate,attr,omitempty"`
	DER          []*DER `xml:"DER"`
	*List
}

// DERSettings is Specifies the time at which the DER information was last updated.
type DERSettings struct {
	ModesEnabled          *DERControlType `xml:"modesEnabled"`
	SetESDelay            uint32          `xml:"setESDelay"`
	SetESHighFreq         uint16          `xml:"setESHighFreq"`
	SetESHighVolt         int16           `xml:"setESHighVolt"`
	SetESLowFreq          uint16          `xml:"setESLowFreq"`
	SetESLowVolt          int16           `xml:"setESLowVolt"`
	SetESRampTms          uint32          `xml:"setESRampTms"`
	SetESRandomDelay      uint32          `xml:"setESRandomDelay"`
	SetGradW              uint16          `xml:"setGradW"`
	SetMaxA               *CurrentRMS     `xml:"setMaxA"`
	SetMaxAh              *AmpereHour     `xml:"setMaxAh"`
	SetMaxChargeRateVA    *ApparentPower  `xml:"setMaxChargeRateVA"`
	SetMaxChargeRateW     *ActivePower    `xml:"setMaxChargeRateW"`
	SetMaxDischargeRateVA *ApparentPower  `xml:"setMaxDischargeRateVA"`
	SetMaxDischargeRateW  *ActivePower    `xml:"setMaxDischargeRateW"`
	SetMaxV               *VoltageRMS     `xml:"setMaxV"`
	SetMaxVA              *ApparentPower  `xml:"setMaxVA"`
	SetMaxVar             *ReactivePower  `xml:"setMaxVar"`
	SetMaxVarNeg          *ReactivePower  `xml:"setMaxVarNeg"`
	SetMaxW               *ActivePower    `xml:"setMaxW"`
	SetMaxWh              *WattHour       `xml:"setMaxWh"`
	SetMinPFOverExcited   *PowerFactor    `xml:"setMinPFOverExcited"`
	SetMinPFUnderExcited  *PowerFactor    `xml:"setMinPFUnderExcited"`
	SetMinV               *VoltageRMS     `xml:"setMinV"`
	SetSoftGradW          uint16          `xml:"setSoftGradW"`
	SetVNom               *VoltageRMS     `xml:"setVNom"`
	SetVRef               *VoltageRMS     `xml:"setVRef"`
	SetVRefOfs            *VoltageRMS     `xml:"setVRefOfs"`
	UpdatedTime           *TimeType       `xml:"updatedTime"`
	*SubscribableResource
}

// DERType is 0 - Not applicable / Unknown
// 1 - Virtual or mixed DER
// 2 - Reciprocating engine
// 3 - Fuel cell
// 4 - Photovoltaic system
// 5 - Combined heat and power
// 6 - Other generation system
// 80 - Other storage system
// 81 - Electric vehicle
// 82 - EVSE
// 83 - Combined PV and storage
// All other values reserved.
type DERType struct {
	*UInt8
}

// DERAvailability is Estimated reserve active power, in watts.
type DERAvailability struct {
	AvailabilityDuration uint32         `xml:"availabilityDuration"`
	MaxChargeDuration    uint32         `xml:"maxChargeDuration"`
	ReadingTime          *TimeType      `xml:"readingTime"`
	ReserveChargePercent *PerCent       `xml:"reserveChargePercent"`
	ReservePercent       *PerCent       `xml:"reservePercent"`
	StatVarAvail         *ReactivePower `xml:"statVarAvail"`
	StatWAvail           *ActivePower   `xml:"statWAvail"`
	*SubscribableResource
}

// DERCapability is Type of DER; see DERType object
type DERCapability struct {
	ModesSupported         *DERControlType      `xml:"modesSupported"`
	RtgAbnormalCategory    uint8                `xml:"rtgAbnormalCategory"`
	RtgMaxA                *CurrentRMS          `xml:"rtgMaxA"`
	RtgMaxAh               *AmpereHour          `xml:"rtgMaxAh"`
	RtgMaxChargeRateVA     *ApparentPower       `xml:"rtgMaxChargeRateVA"`
	RtgMaxChargeRateW      *ActivePower         `xml:"rtgMaxChargeRateW"`
	RtgMaxDischargeRateVA  *ApparentPower       `xml:"rtgMaxDischargeRateVA"`
	RtgMaxDischargeRateW   *ActivePower         `xml:"rtgMaxDischargeRateW"`
	RtgMaxV                *VoltageRMS          `xml:"rtgMaxV"`
	RtgMaxVA               *ApparentPower       `xml:"rtgMaxVA"`
	RtgMaxVar              *ReactivePower       `xml:"rtgMaxVar"`
	RtgMaxVarNeg           *ReactivePower       `xml:"rtgMaxVarNeg"`
	RtgMaxW                *ActivePower         `xml:"rtgMaxW"`
	RtgMaxWh               *WattHour            `xml:"rtgMaxWh"`
	RtgMinPFOverExcited    *PowerFactor         `xml:"rtgMinPFOverExcited"`
	RtgMinPFUnderExcited   *PowerFactor         `xml:"rtgMinPFUnderExcited"`
	RtgMinV                *VoltageRMS          `xml:"rtgMinV"`
	RtgNormalCategory      uint8                `xml:"rtgNormalCategory"`
	RtgOverExcitedPF       *PowerFactor         `xml:"rtgOverExcitedPF"`
	RtgOverExcitedW        *ActivePower         `xml:"rtgOverExcitedW"`
	RtgReactiveSusceptance *ReactiveSusceptance `xml:"rtgReactiveSusceptance"`
	RtgUnderExcitedPF      *PowerFactor         `xml:"rtgUnderExcitedPF"`
	RtgUnderExcitedW       *ActivePower         `xml:"rtgUnderExcitedW"`
	RtgVNom                *VoltageRMS          `xml:"rtgVNom"`
	Type                   *DERType             `xml:"type"`
	*Resource
}

// DERControlBase is Requested ramp time, in hundredths of a second, for the device to transition from the current DERControl  mode setting(s) to the new mode setting(s). If absent, use default ramp rate (setGradW).  Resolution is 1/100 sec.
type DERControlBase struct {
	OpModConnect                bool                       `xml:"opModConnect"`
	OpModEnergize               bool                       `xml:"opModEnergize"`
	OpModFixedPFAbsorbW         *PowerFactorWithExcitation `xml:"opModFixedPFAbsorbW"`
	OpModFixedPFInjectW         *PowerFactorWithExcitation `xml:"opModFixedPFInjectW"`
	OpModFixedVar               *FixedVar                  `xml:"opModFixedVar"`
	OpModFixedW                 *SignedPerCent             `xml:"opModFixedW"`
	OpModFreqDroop              *FreqDroopType             `xml:"opModFreqDroop"`
	OpModFreqWatt               *DERCurveLink              `xml:"opModFreqWatt"`
	OpModHFRTMayTrip            *DERCurveLink              `xml:"opModHFRTMayTrip"`
	OpModHFRTMustTrip           *DERCurveLink              `xml:"opModHFRTMustTrip"`
	OpModHVRTMayTrip            *DERCurveLink              `xml:"opModHVRTMayTrip"`
	OpModHVRTMomentaryCessation *DERCurveLink              `xml:"opModHVRTMomentaryCessation"`
	OpModHVRTMustTrip           *DERCurveLink              `xml:"opModHVRTMustTrip"`
	OpModLFRTMayTrip            *DERCurveLink              `xml:"opModLFRTMayTrip"`
	OpModLFRTMustTrip           *DERCurveLink              `xml:"opModLFRTMustTrip"`
	OpModLVRTMayTrip            *DERCurveLink              `xml:"opModLVRTMayTrip"`
	OpModLVRTMomentaryCessation *DERCurveLink              `xml:"opModLVRTMomentaryCessation"`
	OpModLVRTMustTrip           *DERCurveLink              `xml:"opModLVRTMustTrip"`
	OpModMaxLimW                *PerCent                   `xml:"opModMaxLimW"`
	OpModTargetVar              *ReactivePower             `xml:"opModTargetVar"`
	OpModTargetW                *ActivePower               `xml:"opModTargetW"`
	OpModVoltVar                *DERCurveLink              `xml:"opModVoltVar"`
	OpModVoltWatt               *DERCurveLink              `xml:"opModVoltWatt"`
	OpModWattPF                 *DERCurveLink              `xml:"opModWattPF"`
	OpModWattVar                *DERCurveLink              `xml:"opModWattVar"`
	RampTms                     uint16                     `xml:"rampTms"`
}

// DERControl is Specifies the bitmap indicating  the categories of devices that SHOULD respond. Devices SHOULD ignore events that do not indicate their device category. If not present, all devices SHOULD respond.
type DERControl struct {
	DERControlBase *DERControlBase     `xml:"DERControlBase"`
	DeviceCategory *DeviceCategoryType `xml:"deviceCategory"`
	*RandomizableEvent
}

// DERControlList is A List element to hold DERControl objects.
type DERControlList struct {
	DERControl []*DERControl `xml:"DERControl"`
	*SubscribableList
}

// DERControlType is Control modes supported by the DER.  Bit positions SHALL be defined as follows:
// 0 - Charge mode
// 1 - Discharge mode
// 2 - opModConnect (Connect / Disconnect - implies galvanic isolation)
// 3 - opModEnergize (Energize / De-Energize)
// 4 - opModFixedPFAbsorbW (Fixed Power Factor Setpoint when absorbing active power)
// 5 - opModFixedPFInjectW (Fixed Power Factor Setpoint when injecting active power)
// 6 - opModFixedVar (Reactive Power Setpoint)
// 7 - opModFixedW (Charge / Discharge Setpoint)
// 8 - opModFreqDroop (Frequency-Watt Parameterized Mode)
// 9 - opModFreqWatt (Frequency-Watt Curve Mode)
// 10 - opModHFRTMayTrip (High Frequency Ride Through, May Trip Mode)
// 11 - opModHFRTMustTrip (High Frequency Ride Through, Must Trip Mode)
// 12 - opModHVRTMayTrip (High Voltage Ride Through, May Trip Mode)
// 13 - opModHVRTMomentaryCessation (High Voltage Ride Through, Momentary Cessation Mode)
// 14 - opModHVRTMustTrip (High Voltage Ride Through, Must Trip Mode)
// 15 - opModLFRTMayTrip (Low Frequency Ride Through, May Trip Mode)
// 16 - opModLFRTMustTrip (Low Frequency Ride Through, Must Trip Mode)
// 17 - opModLVRTMayTrip (Low Voltage Ride Through, May Trip Mode)
// 18 - opModLVRTMomentaryCessation (Low Voltage Ride Through, Momentary Cessation Mode)
// 19 - opModLVRTMustTrip (Low Voltage Ride Through, Must Trip Mode)
// 20 - opModMaxLimW (Maximum Active Power)
// 21 - opModTargetVar (Target Reactive Power)
// 22 - opModTargetW (Target Active Power)
// 23 - opModVoltVar (Volt-Var Mode)
// 24 - opModVoltWatt (Volt-Watt Mode)
// 25 - opModWattPF (Watt-PowerFactor Mode)
// 26 - opModWattVar (Watt-Var Mode)
// All other values reserved.
type DERControlType struct {
	*HexBinary32
}

// DERCurve is The Y-axis units context.
type DERCurve struct {
	AutonomousVRefEnable       bool                      `xml:"autonomousVRefEnable"`
	AutonomousVRefTimeConstant uint32                    `xml:"autonomousVRefTimeConstant"`
	CreationTime               *TimeType                 `xml:"creationTime"`
	CurveData                  []*CurveData              `xml:"CurveData"`
	CurveType                  *DERCurveType             `xml:"curveType"`
	OpenLoopTms                uint16                    `xml:"openLoopTms"`
	RampDecTms                 uint16                    `xml:"rampDecTms"`
	RampIncTms                 uint16                    `xml:"rampIncTms"`
	RampPT1Tms                 uint16                    `xml:"rampPT1Tms"`
	VRef                       *PerCent                  `xml:"vRef"`
	XMultiplier                *PowerOfTenMultiplierType `xml:"xMultiplier"`
	YMultiplier                *PowerOfTenMultiplierType `xml:"yMultiplier"`
	YRefType                   *DERUnitRefType           `xml:"yRefType"`
	*IdentifiedObject
}

// CurrentDERProgramLink is SHALL contain a Link to an instance of DERProgram.  If present, this is the DERProgram containing the currently active DERControl.
type CurrentDERProgramLink struct {
	*Link
}

// DERCurveList is A List element to hold DERCurve objects.
type DERCurveList struct {
	DERCurve []*DERCurve `xml:"DERCurve"`
	*List
}

// CurveData is The data value of the Y-axis (dependent) variable, depending on the curve type. See definitions in DERControlBase for further information. If yvalue is Power Factor, the excitation field SHALL be present and yvalue SHALL be a positive value. If yvalue is not Power Factor, the excitation field SHALL NOT be present.
type CurveData struct {
	Excitation bool `xml:"excitation"`
	Xvalue     int  `xml:"xvalue"`
	Yvalue     int  `xml:"yvalue"`
}

// DERCurveType is 0 - opModFreqWatt (Frequency-Watt Curve Mode)
// 1 - opModHFRTMayTrip (High Frequency Ride Through, May Trip Mode)
// 2 - opModHFRTMustTrip (High Frequency Ride Through, Must Trip Mode)
// 3 - opModHVRTMayTrip (High Voltage Ride Through, May Trip Mode)
// 4 - opModHVRTMomentaryCessation (High Voltage Ride Through, Momentary Cessation Mode)
// 5 - opModHVRTMustTrip (High Voltage Ride Through, Must Trip Mode)
// 6 - opModLFRTMayTrip (Low Frequency Ride Through, May Trip Mode)
// 7 - opModLFRTMustTrip (Low Frequency Ride Through, Must Trip Mode)
// 8 - opModLVRTMayTrip (Low Voltage Ride Through, May Trip Mode)
// 9 - opModLVRTMomentaryCessation (Low Voltage Ride Through, Momentary Cessation Mode)
// 10 - opModLVRTMustTrip (Low Voltage Ride Through, Must Trip Mode)
// 11 - opModVoltVar (Volt-Var Mode)
// 12 - opModVoltWatt (Volt-Watt Mode)
// 13 - opModWattPF (Watt-PowerFactor Mode)
// 14 - opModWattVar (Watt-Var Mode)
// All other values reserved.
type DERCurveType struct {
	*UInt8
}

// DERProgram is Indicates the relative primacy of the provider of this Program.
type DERProgram struct {
	ActiveDERControlListLink *ActiveDERControlListLink `xml:"ActiveDERControlListLink"`
	DefaultDERControlLink    *DefaultDERControlLink    `xml:"DefaultDERControlLink"`
	DERControlListLink       *DERControlListLink       `xml:"DERControlListLink"`
	DERCurveListLink         *DERCurveListLink         `xml:"DERCurveListLink"`
	Primacy                  *PrimacyType              `xml:"primacy"`
	*SubscribableIdentifiedObject
}

// DERProgramList is A List element to hold DERProgram objects.
type DERProgramList struct {
	PollRateAttr uint32        `xml:"pollRate,attr,omitempty"`
	DERProgram   []*DERProgram `xml:"DERProgram"`
	*SubscribableList
}

// DERStatus is Connect/status value for storage DER.
// See ConnectStatusType for values.
type DERStatus struct {
	AlarmStatus            string                      `xml:"alarmStatus"`
	GenConnectStatus       *ConnectStatusType          `xml:"genConnectStatus"`
	InverterStatus         *InverterStatusType         `xml:"inverterStatus"`
	LocalControlModeStatus *LocalControlModeStatusType `xml:"localControlModeStatus"`
	ManufacturerStatus     *ManufacturerStatusType     `xml:"manufacturerStatus"`
	OperationalModeStatus  *OperationalModeStatusType  `xml:"operationalModeStatus"`
	ReadingTime            *TimeType                   `xml:"readingTime"`
	StateOfChargeStatus    *StateOfChargeStatusType    `xml:"stateOfChargeStatus"`
	StorageModeStatus      *StorageModeStatusType      `xml:"storageModeStatus"`
	StorConnectStatus      *ConnectStatusType          `xml:"storConnectStatus"`
	*SubscribableResource
}

// DERUnitRefType is Specifies context for interpreting percent values:
// 0 - N/A
// 1 - %setMaxW
// 2 - %setMaxVar
// 3 - %statVarAvail
// 4 - %setEffectiveV
// 5 - %setMaxChargeRateW
// 6 - %setMaxDischargeRateW
// 7 - %statWAvail
// All other values reserved.
type DERUnitRefType struct {
	*UInt8
}

// CurrentRMS is Value in amperes RMS (uom 5)
type CurrentRMS struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// FixedPointType is Dimensionless value
type FixedPointType struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      int16                     `xml:"value"`
}

// UnsignedFixedPointType is Dimensionless value
type UnsignedFixedPointType struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// ActivePower is Value in watts (uom 38)
type ActivePower struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      int16                     `xml:"value"`
}

// AmpereHour is Value in ampere-hours (uom 106)
type AmpereHour struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// ApparentPower is Value in volt-amperes (uom 61)
type ApparentPower struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// ReactivePower is Value in volt-amperes reactive (var) (uom 63)
type ReactivePower struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      int16                     `xml:"value"`
}

// ReactiveSusceptance is Value in siemens (uom 53)
type ReactiveSusceptance struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// PowerFactor is Specifies exponent of 'displacement'.
type PowerFactor struct {
	Displacement uint16                    `xml:"displacement"`
	Multiplier   *PowerOfTenMultiplierType `xml:"multiplier"`
}

// PowerFactorWithExcitation is Specifies exponent of 'displacement'.
type PowerFactorWithExcitation struct {
	Displacement uint16                    `xml:"displacement"`
	Excitation   bool                      `xml:"excitation"`
	Multiplier   *PowerOfTenMultiplierType `xml:"multiplier"`
}

// FixedVar is Specify a signed setpoint for reactive power in % (see 'refType' for context).
type FixedVar struct {
	RefType *DERUnitRefType `xml:"refType"`
	Value   *SignedPerCent  `xml:"value"`
}

// WattHour is Value in watt-hours (uom 72)
type WattHour struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// VoltageRMS is Value in volts RMS (uom 29)
type VoltageRMS struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint16                    `xml:"value"`
}

// ConnectStatusType is The value indicating the state.
type ConnectStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    string    `xml:"value"`
}

// InverterStatusType is The value indicating the state.
type InverterStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    uint8     `xml:"value"`
}

// LocalControlModeStatusType is The value indicating the state.
type LocalControlModeStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    uint8     `xml:"value"`
}

// ManufacturerStatusType is The value indicating the state.
type ManufacturerStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    string    `xml:"value"`
}

// OperationalModeStatusType is The value indicating the state.
type OperationalModeStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    uint8     `xml:"value"`
}

// StateOfChargeStatusType is The value indicating the state.
type StateOfChargeStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    *PerCent  `xml:"value"`
}

// StorageModeStatusType is The value indicating the state.
type StorageModeStatusType struct {
	DateTime *TimeType `xml:"dateTime"`
	Value    uint8     `xml:"value"`
}

// AccountBalanceLink is SHALL contain a Link to an instance of AccountBalance.
type AccountBalanceLink struct {
	*Link
}

// ActiveBillingPeriodListLink is SHALL contain a Link to a List of active BillingPeriod instances.
type ActiveBillingPeriodListLink struct {
	*ListLink
}

// ActiveCreditRegisterListLink is SHALL contain a Link to a List of active CreditRegister instances.
type ActiveCreditRegisterListLink struct {
	*ListLink
}

// ActiveDERControlListLink is SHALL contain a Link to a List of active DERControl instances.
type ActiveDERControlListLink struct {
	*ListLink
}

// ActiveEndDeviceControlListLink is SHALL contain a Link to a List of active EndDeviceControl instances.
type ActiveEndDeviceControlListLink struct {
	*ListLink
}

// ActiveFlowReservationListLink is SHALL contain a Link to a List of active FlowReservation instances.
type ActiveFlowReservationListLink struct {
	*ListLink
}

// ActiveProjectionReadingListLink is SHALL contain a Link to a List of active ProjectionReading instances.
type ActiveProjectionReadingListLink struct {
	*ListLink
}

// ActiveSupplyInterruptionOverrideListLink is SHALL contain a Link to a List of active SupplyInterruptionOverride instances.
type ActiveSupplyInterruptionOverrideListLink struct {
	*ListLink
}

// ActiveTargetReadingListLink is SHALL contain a Link to a List of active TargetReading instances.
type ActiveTargetReadingListLink struct {
	*ListLink
}

// ActiveTextMessageListLink is SHALL contain a Link to a List of active TextMessage instances.
type ActiveTextMessageListLink struct {
	*ListLink
}

// ActiveTimeTariffIntervalListLink is SHALL contain a Link to a List of active TimeTariffInterval instances.
type ActiveTimeTariffIntervalListLink struct {
	*ListLink
}

// AssociatedDERProgramListLink is SHALL contain a Link to a List of DERPrograms having the DERControl(s) for this DER.
type AssociatedDERProgramListLink struct {
	*ListLink
}

// AssociatedUsagePointLink is SHALL contain a Link to an instance of UsagePoint.  If present, this is the submeter that monitors the DER output.
type AssociatedUsagePointLink struct {
	*Link
}

// BillingPeriodListLink is SHALL contain a Link to a List of BillingPeriod instances.
type BillingPeriodListLink struct {
	*ListLink
}

// BillingReadingListLink is SHALL contain a Link to a List of BillingReading instances.
type BillingReadingListLink struct {
	*ListLink
}

// BillingReadingSetListLink is SHALL contain a Link to a List of BillingReadingSet instances.
type BillingReadingSetListLink struct {
	*ListLink
}

// ConfigurationLink is SHALL contain a Link to an instance of Configuration.
type ConfigurationLink struct {
	*Link
}

// ConsumptionTariffIntervalListLink is SHALL contain a Link to a List of ConsumptionTariffInterval instances.
type ConsumptionTariffIntervalListLink struct {
	*ListLink
}

// CreditRegisterListLink is SHALL contain a Link to a List of CreditRegister instances.
type CreditRegisterListLink struct {
	*ListLink
}

// CustomerAccountLink is SHALL contain a Link to an instance of CustomerAccount.
type CustomerAccountLink struct {
	*Link
}

// CustomerAccountListLink is SHALL contain a Link to a List of CustomerAccount instances.
type CustomerAccountListLink struct {
	*ListLink
}

// CustomerAgreementListLink is SHALL contain a Link to a List of CustomerAgreement instances.
type CustomerAgreementListLink struct {
	*ListLink
}

// DemandResponseProgramLink is SHALL contain a Link to an instance of DemandResponseProgram.
type DemandResponseProgramLink struct {
	*Link
}

// DemandResponseProgramListLink is SHALL contain a Link to a List of DemandResponseProgram instances.
type DemandResponseProgramListLink struct {
	*ListLink
}

// DERAvailabilityLink is SHALL contain a Link to an instance of DERAvailability.
type DERAvailabilityLink struct {
	*Link
}

// DefaultDERControlLink is SHALL contain a Link to an instance of DefaultDERControl. This is the default mode of the DER which MAY be overridden by DERControl events.
type DefaultDERControlLink struct {
	*Link
}

// DERCapabilityLink is SHALL contain a Link to an instance of DERCapability.
type DERCapabilityLink struct {
	*Link
}

// DERControlListLink is SHALL contain a Link to a List of DERControl instances.
type DERControlListLink struct {
	*ListLink
}

// DERCurveLink is SHALL contain a Link to an instance of DERCurve.
type DERCurveLink struct {
	*Link
}

// DERCurveListLink is SHALL contain a Link to a List of DERCurve instances.
type DERCurveListLink struct {
	*ListLink
}

// DERLink is SHALL contain a Link to an instance of DER.
type DERLink struct {
	*Link
}

// DERListLink is SHALL contain a Link to a List of DER instances.
type DERListLink struct {
	*ListLink
}

// DERProgramLink is SHALL contain a Link to an instance of DERProgram.
type DERProgramLink struct {
	*Link
}

// DERProgramListLink is SHALL contain a Link to a List of DERProgram instances.
type DERProgramListLink struct {
	*ListLink
}

// DERSettingsLink is SHALL contain a Link to an instance of DERSettings.
type DERSettingsLink struct {
	*Link
}

// DERStatusLink is SHALL contain a Link to an instance of DERStatus.
type DERStatusLink struct {
	*Link
}

// DeviceCapabilityLink is SHALL contain a Link to an instance of DeviceCapability.
type DeviceCapabilityLink struct {
	*Link
}

// DeviceInformationLink is SHALL contain a Link to an instance of DeviceInformation.
type DeviceInformationLink struct {
	*Link
}

// DeviceStatusLink is SHALL contain a Link to an instance of DeviceStatus.
type DeviceStatusLink struct {
	*Link
}

// EndDeviceControlListLink is SHALL contain a Link to a List of EndDeviceControl instances.
type EndDeviceControlListLink struct {
	*ListLink
}

// EndDeviceLink is SHALL contain a Link to an instance of EndDevice.
type EndDeviceLink struct {
	*Link
}

// EndDeviceListLink is SHALL contain a Link to a List of EndDevice instances.
type EndDeviceListLink struct {
	*ListLink
}

// FileLink is This element MUST be set to the URI of the most recent File being loaded/activated by the LD. In the case of file status 0, this element MUST be omitted.
type FileLink struct {
	*Link
}

// FileListLink is SHALL contain a Link to a List of File instances.
type FileListLink struct {
	*ListLink
}

// FileStatusLink is SHALL contain a Link to an instance of FileStatus.
type FileStatusLink struct {
	*Link
}

// FlowReservationRequestListLink is SHALL contain a Link to a List of FlowReservationRequest instances.
type FlowReservationRequestListLink struct {
	*ListLink
}

// FlowReservationResponseListLink is SHALL contain a Link to a List of FlowReservationResponse instances.
type FlowReservationResponseListLink struct {
	*ListLink
}

// FunctionSetAssignmentsListLink is SHALL contain a Link to a List of FunctionSetAssignments instances.
type FunctionSetAssignmentsListLink struct {
	*ListLink
}

// HistoricalReadingListLink is SHALL contain a Link to a List of HistoricalReading instances.
type HistoricalReadingListLink struct {
	*ListLink
}

// IPAddrListLink is SHALL contain a Link to a List of IPAddr instances.
type IPAddrListLink struct {
	*ListLink
}

// IPInterfaceListLink is SHALL contain a Link to a List of IPInterface instances.
type IPInterfaceListLink struct {
	*ListLink
}

// LLInterfaceListLink is SHALL contain a Link to a List of LLInterface instances.
type LLInterfaceListLink struct {
	*ListLink
}

// LoadShedAvailabilityListLink is SHALL contain a Link to a List of LoadShedAvailability instances.
type LoadShedAvailabilityListLink struct {
	*ListLink
}

// LogEventListLink is SHALL contain a Link to a List of LogEvent instances.
type LogEventListLink struct {
	*ListLink
}

// MessagingProgramListLink is SHALL contain a Link to a List of MessagingProgram instances.
type MessagingProgramListLink struct {
	*ListLink
}

// MeterReadingLink is SHALL contain a Link to an instance of MeterReading.
type MeterReadingLink struct {
	*Link
}

// MeterReadingListLink is SHALL contain a Link to a List of MeterReading instances.
type MeterReadingListLink struct {
	*ListLink
}

// MirrorUsagePointListLink is SHALL contain a Link to a List of MirrorUsagePoint instances.
type MirrorUsagePointListLink struct {
	*ListLink
}

// NeighborListLink is SHALL contain a Link to a List of Neighbor instances.
type NeighborListLink struct {
	*ListLink
}

// NotificationListLink is SHALL contain a Link to a List of Notification instances.
type NotificationListLink struct {
	*ListLink
}

// PowerStatusLink is SHALL contain a Link to an instance of PowerStatus.
type PowerStatusLink struct {
	*Link
}

// PrepaymentLink is SHALL contain a Link to an instance of Prepayment.
type PrepaymentLink struct {
	*Link
}

// PrepaymentListLink is SHALL contain a Link to a List of Prepayment instances.
type PrepaymentListLink struct {
	*ListLink
}

// PrepayOperationStatusLink is SHALL contain a Link to an instance of PrepayOperationStatus.
type PrepayOperationStatusLink struct {
	*Link
}

// PriceResponseCfgListLink is SHALL contain a Link to a List of PriceResponseCfg instances.
type PriceResponseCfgListLink struct {
	*ListLink
}

// ProjectionReadingListLink is SHALL contain a Link to a List of ProjectionReading instances.
type ProjectionReadingListLink struct {
	*ListLink
}

// RateComponentLink is SHALL contain a Link to an instance of RateComponent.
type RateComponentLink struct {
	*Link
}

// RateComponentListLink is SHALL contain a Link to a List of RateComponent instances.
type RateComponentListLink struct {
	*ListLink
}

// ReadingLink is A Link to a Reading.
type ReadingLink struct {
	*Link
}

// ReadingListLink is SHALL contain a Link to a List of Reading instances.
type ReadingListLink struct {
	*ListLink
}

// ReadingSetListLink is SHALL contain a Link to a List of ReadingSet instances.
type ReadingSetListLink struct {
	*ListLink
}

// ReadingTypeLink is SHALL contain a Link to an instance of ReadingType.
type ReadingTypeLink struct {
	*Link
}

// RegistrationLink is SHALL contain a Link to an instance of Registration.
type RegistrationLink struct {
	*Link
}

// ResponseListLink is SHALL contain a Link to a List of Response instances.
type ResponseListLink struct {
	*ListLink
}

// ResponseSetListLink is SHALL contain a Link to a List of ResponseSet instances.
type ResponseSetListLink struct {
	*ListLink
}

// RPLInstanceListLink is SHALL contain a Link to a List of RPLInterface instances.
type RPLInstanceListLink struct {
	*ListLink
}

// RPLSourceRoutesListLink is SHALL contain a Link to a List of RPLSourceRoutes instances.
type RPLSourceRoutesListLink struct {
	*ListLink
}

// SelfDeviceLink is SHALL contain a Link to an instance of SelfDevice.
type SelfDeviceLink struct {
	*Link
}

// ServiceSupplierLink is SHALL contain a Link to an instance of ServiceSupplier.
type ServiceSupplierLink struct {
	*Link
}

// SubscriptionListLink is SHALL contain a Link to a List of Subscription instances.
type SubscriptionListLink struct {
	*ListLink
}

// SupplyInterruptionOverrideListLink is SHALL contain a Link to a List of SupplyInterruptionOverride instances.
type SupplyInterruptionOverrideListLink struct {
	*ListLink
}

// SupportedLocaleListLink is SHALL contain a Link to a List of SupportedLocale instances.
type SupportedLocaleListLink struct {
	*ListLink
}

// TargetReadingListLink is SHALL contain a Link to a List of TargetReading instances.
type TargetReadingListLink struct {
	*ListLink
}

// TariffProfileLink is SHALL contain a Link to an instance of TariffProfile.
type TariffProfileLink struct {
	*Link
}

// TariffProfileListLink is SHALL contain a Link to a List of TariffProfile instances.
type TariffProfileListLink struct {
	*ListLink
}

// TextMessageListLink is SHALL contain a Link to a List of TextMessage instances.
type TextMessageListLink struct {
	*ListLink
}

// TimeLink is SHALL contain a Link to an instance of Time.
type TimeLink struct {
	*Link
}

// TimeTariffIntervalListLink is SHALL contain a Link to a List of TimeTariffInterval instances.
type TimeTariffIntervalListLink struct {
	*ListLink
}

// UsagePointLink is SHALL contain a Link to an instance of UsagePoint.
type UsagePointLink struct {
	*Link
}

// UsagePointListLink is SHALL contain a Link to a List of UsagePoint instances.
type UsagePointListLink struct {
	*ListLink
}

// IdentifiedObject is Contains the version number of the object. See the type definition for details.
type IdentifiedObject struct {
	MRID        *MRIDType    `xml:"mRID"`
	Description string       `xml:"description"`
	Version     *VersionType `xml:"version"`
	*Resource
}

// Link is Links provide a reference, via URI, to another resource.
type Link struct {
	HrefAttr string `xml:"href,attr"`
}

// List is Container to hold a collection of object instances or references. See Design Pattern section for additional details.
type List struct {
	AllAttr     uint32 `xml:"all,attr"`
	ResultsAttr uint32 `xml:"results,attr"`
	*Resource
}

// ListLink is ListLinks provide a reference, via URI, to a List.
type ListLink struct {
	AllAttr uint32 `xml:"all,attr,omitempty"`
	*Link
}

// Resource is A resource is an addressable unit of information, either a collection (List) or instance of an object (identifiedObject, or simply, Resource)
type Resource struct {
	HrefAttr string `xml:"href,attr,omitempty"`
}

// RespondableIdentifiedObject is Contains the version number of the object. See the type definition for details.
type RespondableIdentifiedObject struct {
	MRID        *MRIDType    `xml:"mRID"`
	Description string       `xml:"description"`
	Version     *VersionType `xml:"version"`
	*RespondableResource
}

// RespondableResource is A Resource to which a Response can be requested.
type RespondableResource struct {
	ReplyToAttr          string `xml:"replyTo,attr,omitempty"`
	ResponseRequiredAttr string `xml:"responseRequired,attr,omitempty"`
	*Resource
}

// RespondableSubscribableIdentifiedObject is Contains the version number of the object. See the type definition for details.
type RespondableSubscribableIdentifiedObject struct {
	SubscribableAttr *UInt8       `xml:"subscribable,attr,omitempty"`
	MRID             *MRIDType    `xml:"mRID"`
	Description      string       `xml:"description"`
	Version          *VersionType `xml:"version"`
	*RespondableResource
}

// SubscribableIdentifiedObject is Contains the version number of the object. See the type definition for details.
type SubscribableIdentifiedObject struct {
	MRID        *MRIDType    `xml:"mRID"`
	Description string       `xml:"description"`
	Version     *VersionType `xml:"version"`
	*SubscribableResource
}

// SubscribableList is A List to which a Subscription can be requested.
type SubscribableList struct {
	AllAttr     uint32 `xml:"all,attr"`
	ResultsAttr uint32 `xml:"results,attr"`
	*SubscribableResource
}

// SubscribableResource is A Resource to which a Subscription can be requested.
type SubscribableResource struct {
	SubscribableAttr *UInt8 `xml:"subscribable,attr,omitempty"`
	*Resource
}

// Error is Code indicating the reason for failure.
//
// 0 - Invalid request format
// 1 - Invalid request values (e.g. invalid threshold values)
// 2 - Resource limit reached
// 3 - Conditional subscription field not supported
// 4 - Maximum request frequency exceeded
// All other values reserved
type Error struct {
	MaxRetryDuration uint16 `xml:"maxRetryDuration"`
	ReasonCode       uint16 `xml:"reasonCode"`
}

// Event is The period during which the Event applies.
type Event struct {
	CreationTime *TimeType         `xml:"creationTime"`
	EventStatus  *EventStatus      `xml:"EventStatus"`
	Interval     *DateTimeInterval `xml:"interval"`
	*RespondableSubscribableIdentifiedObject
}

// EventStatus is The Reason attribute allows a Service provider to provide a textual explanation of the status.
type EventStatus struct {
	CurrentStatus             uint8     `xml:"currentStatus"`
	DateTime                  *TimeType `xml:"dateTime"`
	PotentiallySuperseded     bool      `xml:"potentiallySuperseded"`
	PotentiallySupersededTime *TimeType `xml:"potentiallySupersededTime"`
	Reason                    string    `xml:"reason"`
}

// RandomizableEvent is Number of seconds boundary inside which a random value must be selected to be applied to the associated interval start time, to avoid sudden synchronized demand changes. If related to price level changes, sign may be ignored. Valid range is -3600 to 3600. If not specified, 0 is the default.
type RandomizableEvent struct {
	RandomizeDuration *OneHourRangeType `xml:"randomizeDuration"`
	RandomizeStart    *OneHourRangeType `xml:"randomizeStart"`
	*Event
}

// AccumulationBehaviourType is 0 = Not Applicable (default, if not specified)
//
// 3 = Cumulative
// The sum of the previous billing period values. Note: “Cumulative” is commonly used in conjunction with “demand.” Each demand reset causes the maximum demand value for the present billing period (since the last demand reset) to accumulate as an accumulative total of all maximum demands. So instead of “zeroing” the demand register, a demand reset has the affect of adding the present maximum demand to this accumulating total.
//
// 4 = DeltaData
// The difference between the value at the end of the prescribed interval and the beginning of the interval. This is used for incremental interval data.
// Note: One common application would be for load profile data, another use might be to report the number of events within an interval (such as the number of equipment energizations within the specified period of time.)
//
// 6 = Indicating
// As if a needle is swung out on the meter face to a value to indicate the current value. (Note: An “indicating” value is typically measured over hundreds of milliseconds or greater, or may imply a “pusher” mechanism to capture a value. Compare this to “instantaneous” which is measured over a shorter period of time.)
//
// 9 = Summation
// A form of accumulation which is selective with respect to time.
// Note : “Summation” could be considered a specialization of “Bulk Quantity” according to the rules of inheritance where “Summation” selectively accumulates pulses over a timing pattern, and “BulkQuantity” accumulates pulses all of the time.
//
// 12 = Instantaneous
// Typically measured over the fastest period of time allowed by the definition of the metric (usually milliseconds or tens of milliseconds.) (Note: “Instantaneous” was moved to attribute #3 in 61968-9Ed2 from attribute #1 in 61968-9Ed1.)
//
// All other values reserved.
type AccumulationBehaviourType struct {
	*UInt8
}

// ApplianceLoadReductionType is 0 - Delay Appliance Load
// Parameter requesting the appliance to respond by providing a moderate load reduction for the duration of a delay period.  Typically referring to a “non-emergency” event in which appliances can continue operating if already in a load consuming period.
//
// 1 - Temporary Appliance Load Reduction
// Parameter requesting the appliance to respond by providing an aggressive load reduction for a short time period.  Typically referring to an “emergency/spinning reserve” event in which an appliance should start shedding load if currently in a load consuming period.
//
// * Full definition of how appliances react when receiving each parameter is document in the EPA document - ENERGY STAR® Program Requirements, Product Specification for Residential Refrigerators and Freezers, Eligibility Criteria 5, Draft 2 Version 5.0.
//
// All other values reserved.
type ApplianceLoadReductionType struct {
	*UInt8
}

// CommodityType is 0 = Not Applicable (default, if not specified)
// 1 = Electricity secondary metered value (a premises meter is typically on the low voltage, or secondary, side of a service transformer)
// 2 = Electricity primary metered value (measured on the high voltage, or primary, side of the service transformer)
// 4 = Air
// 7 = NaturalGas
// 8 = Propane
// 9 = PotableWater
// 10 = Steam
// 11 = WasteWater
// 12 = HeatingFluid
// 13 = CoolingFluid
// All other values reserved.
type CommodityType struct {
	*UInt8
}

// ConsumptionBlockType is 0 = Not Applicable (default, if not specified)
// 1 = Block 1
// 2 = Block 2
// 3 = Block 3
// 4 = Block 4
// 5 = Block 5
// 6 = Block 6
// 7 = Block 7
// 8 = Block 8
// 9 = Block 9
// 10 = Block 10
// 11 = Block 11
// 12 = Block 12
// 13 = Block 13
// 14 = Block 14
// 15 = Block 15
// 16 = Block 16
// All other values reserved.
type ConsumptionBlockType struct {
	*UInt8
}

// CurrencyCode is Follows codes defined in [ISO 4217].
// 0 - Not Applicable (default, if not specified)
// 36 - Australian Dollar
// 124 - Canadian Dollar
// 840 - US Dollar
// 978 - Euro
// This is not a complete list.
type CurrencyCode struct {
	*UInt16
}

// DataQualifierType is 0 = Not Applicable (default, if not specified)
// 2 = Average
// 8 = Maximum
// 9 = Minimum
// 12 = Normal
// 29 = Standard Deviation of a Population (typically indicated by a lower case sigma)
// 30 = Standard Deviation of a Sample Drawn from a Population (typically indicated by a lower case 's')
// All other values reserved.
type DataQualifierType struct {
	*UInt8
}

// DateTimeInterval is Date and time of the start of the interval.
type DateTimeInterval struct {
	Duration uint32    `xml:"duration"`
	Start    *TimeType `xml:"start"`
}

// DeviceCategoryType is The Device category types defined.
// Bit positions SHALL be defined as follows:
// 0 - Programmable Communicating Thermostat
// 1 - Strip Heaters
// 2 - Baseboard Heaters
// 3 - Water Heater
// 4 - Pool Pump
// 5 - Sauna
// 6 - Hot Tub
// 7 - Smart Appliance
// 8 - Irrigation Pump
// 9 - Managed Commercial and Industrial (C&amp;I) Loads
// 10 - Simple Misc. (Residential On/Off) Loads
// 11 - Exterior Lighting
// 12 - Interior Lighting
// 13 - Load Control Switch
// 14 - Energy Management System
// 15 - Smart Energy Module
// 16 - Electric Vehicle
// 17 - EVSE
// 18 - Virtual or Mixed DER
// 19 - Reciprocating Engine
// 20 - Fuel Cell
// 21 - Photovoltaic System
// 22 - Combined Heat and Power
// 23 - Combined PV and Storage
// 24 - Other Generation System
// 25 - Other Storage System
// All other values reserved.
type DeviceCategoryType struct {
	*HexBinary32
}

// DstRuleType is Bit map encoded rule from which is calculated the start or end time, within the current year, to which daylight savings time offset must be applied.
//
// The rule encoding:
// Bits  0 - 11: seconds 0 - 3599
// Bits 12 - 16: hours 0 - 23
// Bits 17 - 19: day of the week 0 = not applicable, 1 - 7 (Monday = 1)
// Bits 20 - 24: day of the month 0 = not applicable, 1 - 31
// Bits 25 - 27: operator  (detailed below)
// Bits 28 - 31: month 1 - 12
//
// Rule value of 0xFFFFFFFF means rule processing/DST correction is disabled.
//
// The operators:
//
// 0: DST starts/ends on the Day of the Month
// 1: DST starts/ends on the Day of the Week that is on or after the Day of the Month
// 2: DST starts/ends on the first occurrence of the Day of the Week in a month
// 3: DST starts/ends on the second occurrence of the Day of the Week in a month
// 4: DST starts/ends on the third occurrence of the Day of the Week in a month
// 5: DST starts/ends on the forth occurrence of the Day of the Week in a month
// 6: DST starts/ends on the fifth occurrence of the Day of the Week in a month
// 7: DST starts/ends on the last occurrence of the Day of the Week in a month
//
// An example: DST starts on third Friday in March at 1:45 AM.  The rule...
// Seconds: 2700
// Hours: 1
// Day of Week: 5
// Day of Month: 0
// Operator: 4
// Month: 3
type DstRuleType struct {
	*HexBinary32
}

// FlowDirectionType is 0 = Not Applicable (default, if not specified)
// 1 = Forward (delivered to customer)
// 19 = Reverse (received from customer)
// All other values reserved.
type FlowDirectionType struct {
	*UInt8
}

// GPSLocationType is Specifies the longitude from Greenwich Meridian. -180 (west) to +180 (east) in decimal degrees.
type GPSLocationType struct {
	Lat string `xml:"lat"`
	Lon string `xml:"lon"`
}

// KindType is 0 = Not Applicable (default, if not specified)
// 3 = Currency
// 8 = Demand
// 12 = Energy
// 37 = Power
// All other values reserved.
type KindType struct {
	*UInt8
}

// LocaleType is [RFC 4646] identifier of a language-region
type LocaleType struct {
	*String42
}

// MRIDType is A master resource identifier. The IANA PEN [PEN] provider ID SHALL be specified in bits 0-31, the least-significant bits, and objects created by that provider SHALL be assigned unique IDs with the remaining 96 bits.
// 0xFFFFFFFFFFFFFFFFFFFFFFFF[XXXXXXXX], where [XXXXXXXX] is the PEN, is reserved for a object that is being created (e.g., a ReadingSet for the current time that is still accumulating).
// Except for this special reserved identifier, each modification of an object (resource) representation MUST have a different "version".
type MRIDType struct {
	XMLName xml.Name `xml:"mRIDType"`
	*HexBinary128
}

// OneHourRangeType is A signed time offset, typically applied to a Time value, expressed in seconds, with range -3600 to 3600.
type OneHourRangeType struct {
	*Int16
}

// PENType is IANA Private Enterprise Number [PEN].
type PENType struct {
	*UInt32
}

// PerCent is Used for percentages, specified in hundredths of a percent, 0 - 10000. (10000 = 100%)
type PerCent struct {
	*UInt16
}

// PhaseCode is 0 = Not Applicable (default, if not specified)
// 32 = Phase C (and S2)
// 33 = Phase CN (and S2N)
// 40 = Phase CA
// 64 = Phase B
// 65 = Phase BN
// 66 = Phase BC
// 128 = Phase A (and S1)
// 129 = Phase AN (and S1N)
// 132 = Phase AB
// 224 = Phase ABC
// All other values reserved.
type PhaseCode struct {
	*UInt8
}

// PINType is 6 digit unsigned decimal integer (0 - 999999).
// (Note that this only requires 20 bits, if it can be allocated.)
type PINType struct {
	*UInt32
}

// PowerOfTenMultiplierType is -9 = nano=x10^-9
// -6 = micro=x10^-6
// -3 = milli=x10^-3
// 0 = none=x1 (default, if not specified)
// 1 = deca=x10
// 2 = hecto=x100
// 3 = kilo=x1000
// 6 = Mega=x10^6
// 9 = Giga=x10^9
// This is not a complete list. Any integer between -9 and 9 SHALL be supported, indicating the power of ten multiplier for the units.
type PowerOfTenMultiplierType struct {
	*Int8
}

// PrimacyType is Values possible for indication of "Primary" provider:
// 0: In home energy management system
// 1: Contracted premises service provider
// 2: Non-contractual service provider
// 3 - 64: Reserved
// 65 - 191: User-defined
// 192 - 255: Reserved
//
// Lower numbers indicate higher priority.
type PrimacyType struct {
	*UInt8
}

// RealEnergy is Value of the energy in Watt-hours. (uom 72)
type RealEnergy struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      uint64                    `xml:"value"`
}

// RoleFlagsType is Specifies the roles that apply to a usage point.
// Bit 0 - isMirror - SHALL be set if the server is not the measurement device
// Bit 1 - isPremisesAggregationPoint - SHALL be set if the UsagePoint is the point of delivery for a premises
// Bit 2 - isPEV - SHALL be set if the usage applies to an electric vehicle
// Bit 3 - isDER - SHALL be set if the usage applies to a distributed energy resource, capable of delivering power to the grid.
// Bit 4 - isRevenueQuality - SHALL be set if usage was measured by a device certified as revenue quality
// Bit 5 - isDC - SHALL be set if the usage point measures direct current
// Bit 6 - isSubmeter - SHALL be set if the usage point is not a premises aggregation point
// Bit 7-15 - Reserved
type RoleFlagsType struct {
	*HexBinary16
}

// ServiceKind is Service kind
// 0 - electricity
// 1 - gas
// 2 - water
// 3 - time
// 4 - pressure
// 5 - heat
// 6 - cooling
// All other values reserved.
type ServiceKind struct {
	*UInt8
}

// SFDIType is Unsigned integer, max inclusive 687194767359, which is 2^36-1 (68719476735), with added check digit. See Section 8.3.2 for check digit calculation.
type SFDIType struct {
	*UInt40
}

// SignedPerCent is Used for signed percentages, specified in hundredths of a percent, -10000 - 10000. (10000 = 100%)
type SignedPerCent struct {
	*Int16
}

// SignedRealEnergy is Value of the energy in Watt-hours. (uom 72)
type SignedRealEnergy struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Value      int64                     `xml:"value"`
}

// SubscribableType is The subscribable values.
// 0 - Resource does not support subscriptions
// 1 - Resource supports non-conditional subscriptions
// 2 - Resource supports conditional subscriptions
// 3 - Resource supports both conditional and non-conditional subscriptions
// All other values reserved.
type SubscribableType uint8

// TimeOffsetType is A signed time offset, typically applied to a Time value, expressed in seconds.
type TimeOffsetType struct {
	*Int32
}

// TimeType is Time is a signed 64 bit value representing the number of seconds since 0 hours, 0 minutes, 0 seconds, on the 1st of January, 1970, in UTC, not counting leap seconds.
type TimeType struct {
	*Int64
}

// TOUType is 0 = Not Applicable (default, if not specified)
// 1 = TOU A
// 2 = TOU B
// 3 = TOU C
// 4 = TOU D
// 5 = TOU E
// 6 = TOU F
// 7 = TOU G
// 8 = TOU H
// 9 = TOU I
// 10 = TOU J
// 11 = TOU K
// 12 = TOU L
// 13 = TOU M
// 14 = TOU N
// 15 = TOU O
// All other values reserved.
type TOUType struct {
	*UInt8
}

// UnitType is The unit types defined for end device control target reductions.
// 0 - kWh
// 1 - kW
// 2 - Watts
// 3 - Cubic Meters
// 4 - Cubic Feet
// 5 - US Gallons
// 6 - Imperial Gallons
// 7 - BTUs
// 8 - Liters
// 9 - kPA (gauge)
// 10 - kPA (absolute)
// 11 - Mega Joule
// 12 - Unitless
// All other values reserved.
type UnitType struct {
	*UInt8
}

// UnitValueType is Value in units specified
type UnitValueType struct {
	Multiplier *PowerOfTenMultiplierType `xml:"multiplier"`
	Unit       *UomType                  `xml:"unit"`
	Value      int                       `xml:"value"`
}

// UomType is The following values are recommended values sourced from the unit of measure enumeration in IEC 61968-9 [61968]. Other values from the unit of measure enumeration in IEC 61968-9 [61968] MAY be used.
// 0 = Not Applicable (default, if not specified)
// 5 = A (Current in Amperes (RMS))
// 6 = Kelvin (Temperature)
// 23 = Degrees Celsius (Relative temperature)
// 29 = Voltage
// 31 = J (Energy joule)
// 33 = Hz (Frequency)
// 38 =W (Real power in Watts)
// 42 = m3 (Cubic Meter)
// 61 = VA (Apparent power)
// 63 = var (Reactive power)
// 65 = CosTheta (Displacement Power Factor)
// 67 = V² (Volts squared)
// 69 = A² (Amp squared)
// 71 = VAh (Apparent energy)
// 72 = Wh (Real energy in Watt-hours)
// 73 = varh (Reactive energy)
// 106 = Ah (Ampere-hours / Available Charge)
// 119 = ft3 (Cubic Feet)
// 122 = ft3/h (Cubic Feet per Hour)
// 125 = m3/h (Cubic Meter per Hour)
// 128 = US gl (US Gallons)
// 129 = US gl/h (US Gallons per Hour)
// 130 = IMP gl (Imperial Gallons)
// 131 = IMP gl/h (Imperial Gallons per Hour)
// 132 = BTU
// 133 = BTU/h
// 134 = Liter
// 137 = L/h (Liters per Hour)
// 140 = PA(gauge)
// 155 = PA(absolute)
// 169 = Therm
type UomType struct {
	*UInt8
}

// VersionType is Version SHALL indicate a distinct identifier for each revision of an IdentifiedObject. If not specified, a default version of "0" (initial version) SHALL be assumed. Upon modification of any IdentifiedObject, the mRID SHALL remain the same, but the version SHALL be incremented. Servers MAY NOT modify objects that they did not create, unless they were notified of the change from the entity controlling the object's PEN.
type VersionType struct {
	*UInt16
}

// HexBinary8 is An 8-bit field encoded as a hex string (2 hex characters). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary8 string

// HexBinary16 is A 16-bit field encoded as a hex string (4 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary16 string

// HexBinary32 is A 32-bit field encoded as a hex string (8 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary32 string

// HexBinary48 is A 48-bit field encoded as a hex string (12 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary48 string

// HexBinary64 is A 64-bit field encoded as a hex string (16 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary64 string

// HexBinary128 is A 128-bit field encoded as a hex string (32 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary128 string

// HexBinary160 is A 160-bit field encoded as a hex string (40 hex characters max). Where applicable, bit 0, or the least significant bit, goes on the right. Note that hexBinary requires pairs of hex characters, so an odd number of characters requires a leading "0".
type HexBinary160 string

// String6 is Character string of max length 6. In order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String6 string

// String16 is Character string of max length 16. In order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String16 string

// String20 is Character string of max length 20. In order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String20 string

// String32 is Character string of max length 32. In order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String32 string

// String42 is Character string of max length 42. In order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String42 string

// String192 is Character string of max length 192. For all string types, in order to limit internal storage, implementations SHALL reduce the length of strings using multi-byte characters so that the string may be stored using "maxLength" octets in the given encoding.
type String192 string

// UInt8 is Unsigned integer, max inclusive 255 (2^8-1)
type UInt8 uint8

// UInt16 is Unsigned integer, max inclusive 65535 (2^16-1)
type UInt16 uint16

// UInt32 is Unsigned integer, max inclusive 4294967295 (2^32-1)
type UInt32 uint32

// UInt40 is Unsigned integer, max inclusive 1099511627775 (2^40-1)
type UInt40 uint64

// UInt48 is Unsigned integer, max inclusive 281474976710655 (2^48-1)
type UInt48 uint64

// UInt64 is Unsigned integer, max inclusive 18446744073709551615 (2^64-1)
type UInt64 uint64

// Int8 is Signed integer, min -128 max +127
type Int8 int8

// Int16 is Signed integer, min -32768 max +32767
type Int16 int16

// Int32 is Signed integer, max inclusive 2147483647 (2^31), min inclusive -2147483647 (same as xs:int)
type Int32 int

// Int48 is Signed integer, max inclusive 140737488355328 (2^47), min inclusive -140737488355328
type Int48 int64

// Int64 is Signed integer, max inclusive 9223372036854775807 (2^63), min inclusive -9223372036854775808 (same as xs:long)
type Int64 int64

// MirrorMeterReading is The date and time of the next planned update.
type MirrorMeterReading struct {
	LastUpdateTime   *TimeType           `xml:"lastUpdateTime"`
	MirrorReadingSet []*MirrorReadingSet `xml:"MirrorReadingSet"`
	NextUpdateTime   *TimeType           `xml:"nextUpdateTime"`
	Reading          *Reading            `xml:"Reading"`
	ReadingType      *ReadingType        `xml:"ReadingType"`
	*MeterReadingBase
}

// MirrorMeterReadingList is A List of MirrorMeterReading instances.
type MirrorMeterReadingList struct {
	MirrorMeterReading []*MirrorMeterReading `xml:"MirrorMeterReading"`
	*List
}

// MeterReadingBase is A container for associating ReadingType, Readings and ReadingSets.
type MeterReadingBase struct {
	*IdentifiedObject
}

// MirrorReadingSet is A set of Readings of the ReadingType indicated by the parent MeterReading.
type MirrorReadingSet struct {
	Reading []*Reading `xml:"Reading"`
	*ReadingSetBase
}

// MirrorUsagePoint is POST rate, or how often mirrored data should be POSTed, in seconds. A client MAY indicate a preferred postRate when POSTing MirrorUsagePoint. A server MAY add or modify postRate to indicate its preferred posting rate.
type MirrorUsagePoint struct {
	DeviceLFDI         string                `xml:"deviceLFDI"`
	MirrorMeterReading []*MirrorMeterReading `xml:"MirrorMeterReading"`
	PostRate           uint32                `xml:"postRate"`
	*UsagePointBase
}

// MirrorUsagePointList is A List of MirrorUsagePoint instances.
type MirrorUsagePointList struct {
	PollRateAttr     uint32              `xml:"pollRate,attr,omitempty"`
	MirrorUsagePoint []*MirrorUsagePoint `xml:"MirrorUsagePoint"`
	*List
}

// ReadingBase is Value in units specified by ReadingType
type ReadingBase struct {
	ConsumptionBlock *ConsumptionBlockType `xml:"consumptionBlock"`
	QualityFlags     string                `xml:"qualityFlags"`
	TimePeriod       *DateTimeInterval     `xml:"timePeriod"`
	TouTier          *TOUType              `xml:"touTier"`
	Value            int64                 `xml:"value"`
	*Resource
}

// ReadingSetBase is Specifies the time range during which the contained readings were taken.
type ReadingSetBase struct {
	TimePeriod *DateTimeInterval `xml:"timePeriod"`
	*IdentifiedObject
}

// UsagePointBase is Specifies the current status of the service at this usage point.
// 0 = off
// 1 = on
type UsagePointBase struct {
	RoleFlags           *RoleFlagsType `xml:"roleFlags"`
	ServiceCategoryKind *ServiceKind   `xml:"serviceCategoryKind"`
	Status              uint8          `xml:"status"`
	*IdentifiedObject
}
